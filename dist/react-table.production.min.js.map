{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js","../src/plugin-hooks/useGridLayout.js"],"sourcesContent":["import React from 'react'\r\n\r\nlet renderErr = 'Renderer Error ☝️'\r\n\r\nexport const actions = {\r\n  init: 'init',\r\n}\r\n\r\nexport const defaultRenderer = ({ value = '' }) => value\r\nexport const emptyRenderer = () => <>&nbsp;</>\r\n\r\nexport const defaultColumn = {\r\n  Cell: defaultRenderer,\r\n  width: 150,\r\n  minWidth: 0,\r\n  maxWidth: Number.MAX_SAFE_INTEGER,\r\n}\r\n\r\nfunction mergeProps(...propList) {\r\n  return propList.reduce((props, next) => {\r\n    const { style, className, ...rest } = next\r\n\r\n    props = {\r\n      ...props,\r\n      ...rest,\r\n    }\r\n\r\n    if (style) {\r\n      props.style = props.style\r\n        ? { ...(props.style || {}), ...(style || {}) }\r\n        : style\r\n    }\r\n\r\n    if (className) {\r\n      props.className = props.className\r\n        ? props.className + ' ' + className\r\n        : className\r\n    }\r\n\r\n    if (props.className === '') {\r\n      delete props.className\r\n    }\r\n\r\n    return props\r\n  }, {})\r\n}\r\n\r\nfunction handlePropGetter(prevProps, userProps, meta) {\r\n  // Handle a lambda, pass it the previous props\r\n  if (typeof userProps === 'function') {\r\n    return handlePropGetter({}, userProps(prevProps, meta))\r\n  }\r\n\r\n  // Handle an array, merge each item as separate props\r\n  if (Array.isArray(userProps)) {\r\n    return mergeProps(prevProps, ...userProps)\r\n  }\r\n\r\n  // Handle an object by default, merge the two objects\r\n  return mergeProps(prevProps, userProps)\r\n}\r\n\r\nexport const makePropGetter = (hooks, meta = {}) => {\r\n  return (userProps = {}) =>\r\n    [...hooks, userProps].reduce(\r\n      (prev, next) =>\r\n        handlePropGetter(prev, next, {\r\n          ...meta,\r\n          userProps,\r\n        }),\r\n      {}\r\n    )\r\n}\r\n\r\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\r\n  hooks.reduce((prev, next) => {\r\n    const nextValue = next(prev, meta)\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!allowUndefined && typeof nextValue === 'undefined') {\r\n        console.info(next)\r\n        throw new Error(\r\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\r\n        )\r\n      }\r\n    }\r\n    return nextValue\r\n  }, initial)\r\n\r\nexport const loopHooks = (hooks, context, meta = {}) =>\r\n  hooks.forEach(hook => {\r\n    const nextValue = hook(context, meta)\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof nextValue !== 'undefined') {\r\n        console.info(hook, nextValue)\r\n        throw new Error(\r\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\r\n        )\r\n      }\r\n    }\r\n  })\r\n\r\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\r\n  if (process.env.NODE_ENV !== 'production' && afters) {\r\n    throw new Error(\r\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\r\n    )\r\n  }\r\n  const pluginIndex = plugins.findIndex(\r\n    plugin => plugin.pluginName === pluginName\r\n  )\r\n\r\n  if (pluginIndex === -1) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\r\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\r\n\r\n  ${pluginName}.pluginName = '${pluginName}'\r\n`)\r\n    }\r\n  }\r\n\r\n  befores.forEach(before => {\r\n    const beforeIndex = plugins.findIndex(\r\n      plugin => plugin.pluginName === before\r\n    )\r\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        throw new Error(\r\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\r\n        )\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport function functionalUpdate(updater, old) {\r\n  return typeof updater === 'function' ? updater(old) : updater\r\n}\r\n\r\nexport function useGetLatest(obj) {\r\n  const ref = React.useRef()\r\n  ref.current = obj\r\n\r\n  return React.useCallback(() => ref.current, [])\r\n}\r\n\r\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\r\nexport const safeUseLayoutEffect =\r\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\r\n\r\nexport function useMountedLayoutEffect(fn, deps) {\r\n  const mountedRef = React.useRef(false)\r\n\r\n  safeUseLayoutEffect(() => {\r\n    if (mountedRef.current) {\r\n      fn()\r\n    }\r\n    mountedRef.current = true\r\n    // eslint-disable-next-line\r\n  }, deps)\r\n}\r\n\r\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\r\n  const debounceRef = React.useRef({})\r\n\r\n  const getDefaultFn = useGetLatest(defaultFn)\r\n  const getDefaultWait = useGetLatest(defaultWait)\r\n\r\n  return React.useCallback(\r\n    async (...args) => {\r\n      if (!debounceRef.current.promise) {\r\n        debounceRef.current.promise = new Promise((resolve, reject) => {\r\n          debounceRef.current.resolve = resolve\r\n          debounceRef.current.reject = reject\r\n        })\r\n      }\r\n\r\n      if (debounceRef.current.timeout) {\r\n        clearTimeout(debounceRef.current.timeout)\r\n      }\r\n\r\n      debounceRef.current.timeout = setTimeout(async () => {\r\n        delete debounceRef.current.timeout\r\n        try {\r\n          debounceRef.current.resolve(await getDefaultFn()(...args))\r\n        } catch (err) {\r\n          debounceRef.current.reject(err)\r\n        } finally {\r\n          delete debounceRef.current.promise\r\n        }\r\n      }, getDefaultWait())\r\n\r\n      return debounceRef.current.promise\r\n    },\r\n    [getDefaultFn, getDefaultWait]\r\n  )\r\n}\r\n\r\nexport function makeRenderer(instance, column, meta = {}) {\r\n  return (type, userProps = {}) => {\r\n    const Comp = typeof type === 'string' ? column[type] : type\r\n\r\n    if (typeof Comp === 'undefined') {\r\n      console.info(column)\r\n      throw new Error(renderErr)\r\n    }\r\n\r\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\r\n  }\r\n}\r\n\r\nexport function flexRender(Comp, props) {\r\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\r\n}\r\n\r\nfunction isReactComponent(component) {\r\n  return (\r\n    isClassComponent(component) ||\r\n    typeof component === 'function' ||\r\n    isExoticComponent(component)\r\n  )\r\n}\r\n\r\nfunction isClassComponent(component) {\r\n  return (\r\n    typeof component === 'function' &&\r\n    (() => {\r\n      const proto = Object.getPrototypeOf(component)\r\n      return proto.prototype && proto.prototype.isReactComponent\r\n    })()\r\n  )\r\n}\r\n\r\nfunction isExoticComponent(component) {\r\n  return (\r\n    typeof component === 'object' &&\r\n    typeof component.$$typeof === 'symbol' &&\r\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\r\n  )\r\n}\r\n\r\n//pass data through each mapper one at a time in order\r\nexport function reduceMappings(data, mappings) {\r\n  return mappings.reduce((data, mapping) => mapping(data), data)\r\n}","import { defaultColumn, emptyRenderer } from './publicUtils'\r\n\r\n// Find the depth of the columns\r\nexport function findMaxDepth(columns, depth = 0) {\r\n  return columns.reduce((prev, curr) => {\r\n    if (curr.columns) {\r\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\r\n    }\r\n    return depth\r\n  }, 0)\r\n}\r\n\r\n// Build the visible columns, headers and flat column list\r\nexport function linkColumnStructure(columns, parent, depth = 0) {\r\n  return columns.map(column => {\r\n    column = {\r\n      ...column,\r\n      parent,\r\n      depth,\r\n    }\r\n\r\n    assignColumnAccessor(column)\r\n\r\n    if (column.columns) {\r\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\r\n    }\r\n    return column\r\n  })\r\n}\r\n\r\nexport function flattenColumns(columns) {\r\n  return flattenBy(columns, 'columns')\r\n}\r\n\r\nexport function assignColumnAccessor(column) {\r\n  // First check for string accessor\r\n  let { id, accessor, Header } = column\r\n\r\n  if (typeof accessor === 'string') {\r\n    id = id || accessor\r\n    const accessorPath = accessor.split('.')\r\n    accessor = row => getBy(row, accessorPath)\r\n  }\r\n\r\n  if (!id && typeof Header === 'string' && Header) {\r\n    id = Header\r\n  }\r\n\r\n  if (!id && column.columns) {\r\n    console.error(column)\r\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\r\n  }\r\n\r\n  if (!id) {\r\n    console.error(column)\r\n    throw new Error('A column ID (or string accessor) is required!')\r\n  }\r\n\r\n  Object.assign(column, {\r\n    id,\r\n    accessor,\r\n  })\r\n\r\n  return column\r\n}\r\n\r\nexport function decorateColumn(column, userDefaultColumn) {\r\n  if (!userDefaultColumn) {\r\n    throw new Error()\r\n  }\r\n  Object.assign(column, {\r\n    // Make sure there is a fallback header, just in case\r\n    Header: emptyRenderer,\r\n    Footer: emptyRenderer,\r\n    ...defaultColumn,\r\n    ...userDefaultColumn,\r\n    ...column,\r\n  })\r\n\r\n  Object.assign(column, {\r\n    originalWidth: column.width,\r\n  })\r\n\r\n  return column\r\n}\r\n\r\n// Build the header groups from the bottom up\r\nexport function makeHeaderGroups(\r\n  allColumns,\r\n  defaultColumn,\r\n  additionalHeaderProperties = () => ({})\r\n) {\r\n  const headerGroups = []\r\n\r\n  let scanColumns = allColumns\r\n\r\n  let uid = 0\r\n  const getUID = () => uid++\r\n\r\n  while (scanColumns.length) {\r\n    // The header group we are creating\r\n    const headerGroup = {\r\n      headers: [],\r\n    }\r\n\r\n    // The parent columns we're going to scan next\r\n    const parentColumns = []\r\n\r\n    const hasParents = scanColumns.some(d => d.parent)\r\n\r\n    // Scan each column for parents\r\n    scanColumns.forEach(column => {\r\n      // What is the latest (last) parent column?\r\n      let latestParentColumn = [...parentColumns].reverse()[0]\r\n\r\n      let newParent\r\n\r\n      if (hasParents) {\r\n        // If the column has a parent, add it if necessary\r\n        if (column.parent) {\r\n          newParent = {\r\n            ...column.parent,\r\n            originalId: column.parent.id,\r\n            id: `${column.parent.id}_${getUID()}`,\r\n            headers: [column],\r\n            ...additionalHeaderProperties(column),\r\n          }\r\n        } else {\r\n          // If other columns have parents, we'll need to add a place holder if necessary\r\n          const originalId = `${column.id}_placeholder`\r\n          newParent = decorateColumn(\r\n            {\r\n              originalId,\r\n              id: `${column.id}_placeholder_${getUID()}`,\r\n              placeholderOf: column,\r\n              headers: [column],\r\n              ...additionalHeaderProperties(column),\r\n            },\r\n            defaultColumn\r\n          )\r\n        }\r\n\r\n        // If the resulting parent columns are the same, just add\r\n        // the column and increment the header span\r\n        if (\r\n          latestParentColumn &&\r\n          latestParentColumn.originalId === newParent.originalId\r\n        ) {\r\n          latestParentColumn.headers.push(column)\r\n        } else {\r\n          parentColumns.push(newParent)\r\n        }\r\n      }\r\n\r\n      headerGroup.headers.push(column)\r\n    })\r\n\r\n    headerGroups.push(headerGroup)\r\n\r\n    // Start scanning the parent columns\r\n    scanColumns = parentColumns\r\n  }\r\n\r\n  return headerGroups.reverse()\r\n}\r\n\r\nconst pathObjCache = new Map()\r\n\r\nexport function getBy(obj, path, def) {\r\n  if (!path) {\r\n    return obj\r\n  }\r\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\r\n\r\n  const pathObj =\r\n    pathObjCache.get(cacheKey) ||\r\n    (() => {\r\n      const pathObj = makePathArray(path)\r\n      pathObjCache.set(cacheKey, pathObj)\r\n      return pathObj\r\n    })()\r\n\r\n  let val\r\n\r\n  try {\r\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\r\n  } catch (e) {\r\n    // continue regardless of error\r\n  }\r\n  return typeof val !== 'undefined' ? val : def\r\n}\r\n\r\nexport function getFirstDefined(...args) {\r\n  for (let i = 0; i < args.length; i += 1) {\r\n    if (typeof args[i] !== 'undefined') {\r\n      return args[i]\r\n    }\r\n  }\r\n}\r\n\r\nexport function getElementDimensions(element) {\r\n  const rect = element.getBoundingClientRect()\r\n  const style = window.getComputedStyle(element)\r\n  const margins = {\r\n    left: parseInt(style.marginLeft),\r\n    right: parseInt(style.marginRight),\r\n  }\r\n  const padding = {\r\n    left: parseInt(style.paddingLeft),\r\n    right: parseInt(style.paddingRight),\r\n  }\r\n  return {\r\n    left: Math.ceil(rect.left),\r\n    width: Math.ceil(rect.width),\r\n    outerWidth: Math.ceil(\r\n      rect.width + margins.left + margins.right + padding.left + padding.right\r\n    ),\r\n    marginLeft: margins.left,\r\n    marginRight: margins.right,\r\n    paddingLeft: padding.left,\r\n    paddingRight: padding.right,\r\n    scrollWidth: element.scrollWidth,\r\n  }\r\n}\r\n\r\nexport function isFunction(a) {\r\n  if (typeof a === 'function') {\r\n    return a\r\n  }\r\n}\r\n\r\nexport function flattenBy(arr, key) {\r\n  const flat = []\r\n\r\n  const recurse = arr => {\r\n    arr.forEach(d => {\r\n      if (!d[key]) {\r\n        flat.push(d)\r\n      } else {\r\n        recurse(d[key])\r\n      }\r\n    })\r\n  }\r\n\r\n  recurse(arr)\r\n\r\n  return flat\r\n}\r\n\r\nexport function expandRows(\r\n  rows,\r\n  { manualExpandedKey, expanded, expandSubRows = true }\r\n) {\r\n  const expandedRows = []\r\n\r\n  const handleRow = (row, addToExpandedRows = true) => {\r\n    row.isExpanded =\r\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\r\n\r\n    row.canExpand = row.subRows && !!row.subRows.length\r\n\r\n    if (addToExpandedRows) {\r\n      expandedRows.push(row)\r\n    }\r\n\r\n    if (row.subRows && row.subRows.length && row.isExpanded) {\r\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\r\n    }\r\n  }\r\n\r\n  rows.forEach(row => handleRow(row))\r\n\r\n  return expandedRows\r\n}\r\n\r\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\r\n  return (\r\n    isFunction(filter) ||\r\n    userFilterTypes[filter] ||\r\n    filterTypes[filter] ||\r\n    filterTypes.text\r\n  )\r\n}\r\n\r\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\r\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\r\n}\r\n\r\nexport function unpreparedAccessWarning() {\r\n  throw new Error(\r\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\r\n  )\r\n}\r\n\r\nlet passiveSupported = null\r\nexport function passiveEventSupported() {\r\n  // memoize support to avoid adding multiple test events\r\n  if (typeof passiveSupported === 'boolean') return passiveSupported\r\n\r\n  let supported = false\r\n  try {\r\n    const options = {\r\n      get passive() {\r\n        supported = true\r\n        return false\r\n      },\r\n    }\r\n\r\n    window.addEventListener('test', null, options)\r\n    window.removeEventListener('test', null, options)\r\n  } catch (err) {\r\n    supported = false\r\n  }\r\n  passiveSupported = supported\r\n  return passiveSupported\r\n}\r\n\r\n//\r\n\r\nconst reOpenBracket = /\\[/g\r\nconst reCloseBracket = /\\]/g\r\n\r\nfunction makePathArray(obj) {\r\n  return (\r\n    flattenDeep(obj)\r\n      // remove all periods in parts\r\n      .map(d => String(d).replace('.', '_'))\r\n      // join parts using period\r\n      .join('.')\r\n      // replace brackets with periods\r\n      .replace(reOpenBracket, '.')\r\n      .replace(reCloseBracket, '')\r\n      // split it back out on periods\r\n      .split('.')\r\n  )\r\n}\r\n\r\nfunction flattenDeep(arr, newArr = []) {\r\n  if (!Array.isArray(arr)) {\r\n    newArr.push(arr)\r\n  } else {\r\n    for (let i = 0; i < arr.length; i += 1) {\r\n      flattenDeep(arr[i], newArr)\r\n    }\r\n  }\r\n  return newArr\r\n}\r\n","const defaultGetTableProps = props => ({\r\n  role: 'table',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetTableBodyProps = props => ({\r\n  role: 'rowgroup',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetHeaderProps = (props, { column }) => ({\r\n  key: `header_${column.id}`,\r\n  colSpan: column.totalVisibleHeaderCount,\r\n  role: 'columnheader',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetFooterProps = (props, { column }) => ({\r\n  key: `footer_${column.id}`,\r\n  colSpan: column.totalVisibleHeaderCount,\r\n  ...props,\r\n})\r\n\r\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\r\n  key: `headerGroup_${index}`,\r\n  role: 'row',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetFooterGroupProps = (props, { index }) => ({\r\n  key: `footerGroup_${index}`,\r\n  ...props,\r\n})\r\n\r\nconst defaultGetRowProps = (props, { row }) => ({\r\n  key: `row_${row.id}`,\r\n  role: 'row',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetCellProps = (props, { cell }) => ({\r\n  key: `cell_${cell.row.id}_${cell.column.id}`,\r\n  role: 'cell',\r\n  ...props,\r\n})\r\n\r\nexport default function makeDefaultPluginHooks() {\r\n  return {\r\n    useOptions: [],\r\n    stateReducers: [],\r\n    useControlledState: [],\r\n    columns: [],\r\n    columnsDeps: [],\r\n    allColumns: [],\r\n    allColumnsDeps: [],\r\n    accessValue: [],\r\n    materializedColumns: [],\r\n    materializedColumnsDeps: [],\r\n    useInstanceAfterData: [],\r\n    visibleColumns: [],\r\n    visibleColumnsDeps: [],\r\n    headerGroups: [],\r\n    headerGroupsDeps: [],\r\n    useInstanceBeforeDimensions: [],\r\n    useInstance: [],\r\n    prepareRow: [],\r\n    getTableProps: [defaultGetTableProps],\r\n    getTableBodyProps: [defaultGetTableBodyProps],\r\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\r\n    getFooterGroupProps: [defaultGetFooterGroupProps],\r\n    getHeaderProps: [defaultGetHeaderProps],\r\n    getFooterProps: [defaultGetFooterProps],\r\n    getRowProps: [defaultGetRowProps],\r\n    getCellProps: [defaultGetCellProps],\r\n    useFinalInstance: [],\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  functionalUpdate,\r\n  useGetLatest,\r\n  makePropGetter,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nactions.resetHiddenColumns = 'resetHiddenColumns'\r\nactions.toggleHideColumn = 'toggleHideColumn'\r\nactions.setHiddenColumns = 'setHiddenColumns'\r\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\r\n\r\nexport const useColumnVisibility = hooks => {\r\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\r\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\r\n\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\r\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\r\n    ...deps,\r\n    instance.state.hiddenColumns,\r\n  ])\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseColumnVisibility.pluginName = 'useColumnVisibility'\r\n\r\nconst defaultGetToggleHiddenProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      column.toggleHidden(!e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: column.isVisible,\r\n    title: 'Toggle Column Visible',\r\n  },\r\n]\r\n\r\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      instance.toggleHideAllColumns(!e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\r\n    title: 'Toggle All Columns Hidden',\r\n    indeterminate:\r\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\r\n  },\r\n]\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      hiddenColumns: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetHiddenColumns) {\r\n    return {\r\n      ...state,\r\n      hiddenColumns: instance.initialState.hiddenColumns || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleHideColumn) {\r\n    const should =\r\n      typeof action.value !== 'undefined'\r\n        ? action.value\r\n        : !state.hiddenColumns.includes(action.columnId)\r\n\r\n    const hiddenColumns = should\r\n      ? [...state.hiddenColumns, action.columnId]\r\n      : state.hiddenColumns.filter(d => d !== action.columnId)\r\n\r\n    return {\r\n      ...state,\r\n      hiddenColumns,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setHiddenColumns) {\r\n    return {\r\n      ...state,\r\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleHideAllColumns) {\r\n    const shouldAll =\r\n      typeof action.value !== 'undefined'\r\n        ? action.value\r\n        : !state.hiddenColumns.length\r\n\r\n    return {\r\n      ...state,\r\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstanceBeforeDimensions(instance) {\r\n  const {\r\n    headers,\r\n    state: { hiddenColumns },\r\n  } = instance\r\n\r\n  const isMountedRef = React.useRef(false)\r\n\r\n  if (!isMountedRef.current) {\r\n  }\r\n\r\n  const handleColumn = (column, parentVisible) => {\r\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\r\n\r\n    let totalVisibleHeaderCount = 0\r\n\r\n    if (column.headers && column.headers.length) {\r\n      column.headers.forEach(\r\n        subColumn =>\r\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\r\n      )\r\n    } else {\r\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\r\n    }\r\n\r\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\r\n\r\n    return totalVisibleHeaderCount\r\n  }\r\n\r\n  let totalVisibleHeaderCount = 0\r\n\r\n  headers.forEach(\r\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\r\n  )\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    columns,\r\n    flatHeaders,\r\n    dispatch,\r\n    allColumns,\r\n    getHooks,\r\n    state: { hiddenColumns },\r\n    autoResetHiddenColumns = true,\r\n  } = instance\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\r\n\r\n  const toggleHideColumn = React.useCallback(\r\n    (columnId, value) =>\r\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const setHiddenColumns = React.useCallback(\r\n    value => dispatch({ type: actions.setHiddenColumns, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleHideAllColumns = React.useCallback(\r\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getToggleHideAllColumnsProps = makePropGetter(\r\n    getHooks().getToggleHideAllColumnsProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  flatHeaders.forEach(column => {\r\n    column.toggleHidden = value => {\r\n      dispatch({\r\n        type: actions.toggleHideColumn,\r\n        columnId: column.id,\r\n        value,\r\n      })\r\n    }\r\n\r\n    column.getToggleHiddenProps = makePropGetter(\r\n      getHooks().getToggleHiddenProps,\r\n      {\r\n        instance: getInstance(),\r\n        column,\r\n      }\r\n    )\r\n  })\r\n\r\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetHiddenColumns()) {\r\n      dispatch({ type: actions.resetHiddenColumns })\r\n    }\r\n  }, [dispatch, columns])\r\n\r\n  Object.assign(instance, {\r\n    allColumnsHidden,\r\n    toggleHideColumn,\r\n    setHiddenColumns,\r\n    toggleHideAllColumns,\r\n    getToggleHideAllColumnsProps,\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\n//\r\n\r\nimport {\r\n  linkColumnStructure,\r\n  flattenColumns,\r\n  assignColumnAccessor,\r\n  unpreparedAccessWarning,\r\n  makeHeaderGroups,\r\n  decorateColumn,\r\n} from '../utils'\r\n\r\nimport {\r\n  useGetLatest,\r\n  reduceHooks,\r\n  actions,\r\n  loopHooks,\r\n  makePropGetter,\r\n  makeRenderer,\r\n} from '../publicUtils'\r\n\r\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\r\n\r\nimport { useColumnVisibility } from './useColumnVisibility'\r\n\r\nconst defaultInitialState = {}\r\nconst defaultColumnInstance = {}\r\nconst defaultReducer = (state, action, prevState) => state\r\nconst defaultGetSubRows = (row, index) => row.subRows || []\r\nconst defaultGetRowId = (row, index, parent) =>\r\n  `${parent ? [parent.id, index].join('.') : index}`\r\nconst defaultUseControlledState = d => d\r\n\r\nfunction applyDefaults(props) {\r\n  const {\r\n    initialState = defaultInitialState,\r\n    defaultColumn = defaultColumnInstance,\r\n    getSubRows = defaultGetSubRows,\r\n    getRowId = defaultGetRowId,\r\n    stateReducer = defaultReducer,\r\n    useControlledState = defaultUseControlledState,\r\n    ...rest\r\n  } = props\r\n\r\n  return {\r\n    ...rest,\r\n    initialState,\r\n    defaultColumn,\r\n    getSubRows,\r\n    getRowId,\r\n    stateReducer,\r\n    useControlledState,\r\n  }\r\n}\r\n\r\nexport const useTable = (props, ...plugins) => {\r\n  // Apply default props\r\n  props = applyDefaults(props)\r\n\r\n  // Add core plugins\r\n  plugins = [useColumnVisibility, ...plugins]\r\n\r\n  // Create the table instance\r\n  let instanceRef = React.useRef({})\r\n\r\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\r\n  const getInstance = useGetLatest(instanceRef.current)\r\n\r\n  // Assign the props, plugins and hooks to the instance\r\n  Object.assign(getInstance(), {\r\n    ...props,\r\n    plugins,\r\n    hooks: makeDefaultPluginHooks(),\r\n  })\r\n\r\n  // Allow plugins to register hooks as early as possible\r\n  plugins.filter(Boolean).forEach(plugin => {\r\n    plugin(getInstance().hooks)\r\n  })\r\n\r\n  // Consume all hooks and make a getter for them\r\n  const getHooks = useGetLatest(getInstance().hooks)\r\n  getInstance().getHooks = getHooks\r\n  delete getInstance().hooks\r\n\r\n  // Allow useOptions hooks to modify the options coming into the table\r\n  Object.assign(\r\n    getInstance(),\r\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\r\n  )\r\n\r\n  const {\r\n    data,\r\n    columns: userColumns,\r\n    initialState,\r\n    defaultColumn,\r\n    getSubRows,\r\n    getRowId,\r\n    stateReducer,\r\n    useControlledState,\r\n  } = getInstance()\r\n\r\n  // Setup user reducer ref\r\n  const getStateReducer = useGetLatest(stateReducer)\r\n\r\n  // Build the reducer\r\n  const reducer = React.useCallback(\r\n    (state, action) => {\r\n      // Detect invalid actions\r\n      if (!action.type) {\r\n        console.info({ action })\r\n        throw new Error('Unknown Action 👆')\r\n      }\r\n\r\n      // Reduce the state from all plugin reducers\r\n      return [\r\n        ...getHooks().stateReducers,\r\n        // Allow the user to add their own state reducer(s)\r\n        ...(Array.isArray(getStateReducer())\r\n          ? getStateReducer()\r\n          : [getStateReducer()]),\r\n      ].reduce(\r\n        (s, handler) => handler(s, action, state, getInstance()) || s,\r\n        state\r\n      )\r\n    },\r\n    [getHooks, getStateReducer, getInstance]\r\n  )\r\n\r\n  // Start the reducer\r\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\r\n    reducer(initialState, { type: actions.init })\r\n  )\r\n\r\n  // Allow the user to control the final state with hooks\r\n  const state = reduceHooks(\r\n    [...getHooks().useControlledState, useControlledState],\r\n    reducerState,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(getInstance(), {\r\n    state,\r\n    dispatch,\r\n  })\r\n\r\n  // Decorate All the columns\r\n  const columns = React.useMemo(\r\n    () =>\r\n      linkColumnStructure(\r\n        reduceHooks(getHooks().columns, userColumns, {\r\n          instance: getInstance(),\r\n        })\r\n      ),\r\n    [\r\n      getHooks,\r\n      getInstance,\r\n      userColumns,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\r\n    ]\r\n  )\r\n  getInstance().columns = columns\r\n\r\n  // Get the flat list of all columns and allow hooks to decorate\r\n  // those columns (and trigger this memoization via deps)\r\n  let allColumns = React.useMemo(\r\n    () =>\r\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\r\n        instance: getInstance(),\r\n      }).map(assignColumnAccessor),\r\n    [\r\n      columns,\r\n      getHooks,\r\n      getInstance,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n  getInstance().allColumns = allColumns\r\n\r\n  // Access the row model using initial columns\r\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\r\n    let rows = []\r\n    let flatRows = []\r\n    const rowsById = {}\r\n\r\n    const allColumnsQueue = [...allColumns]\r\n\r\n    while (allColumnsQueue.length) {\r\n      const column = allColumnsQueue.shift()\r\n      accessRowsForColumn({\r\n        data,\r\n        rows,\r\n        flatRows,\r\n        rowsById,\r\n        column,\r\n        getRowId,\r\n        getSubRows,\r\n        accessValueHooks: getHooks().accessValue,\r\n        getInstance,\r\n      })\r\n    }\r\n\r\n    return [rows, flatRows, rowsById]\r\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\r\n\r\n  Object.assign(getInstance(), {\r\n    rows,\r\n    initialRows: [...rows],\r\n    flatRows,\r\n    rowsById,\r\n    // materializedColumns,\r\n  })\r\n\r\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\r\n\r\n  // Get the flat list of all columns AFTER the rows\r\n  // have been access, and allow hooks to decorate\r\n  // those columns (and trigger this memoization via deps)\r\n  let visibleColumns = React.useMemo(\r\n    () =>\r\n      reduceHooks(getHooks().visibleColumns, allColumns, {\r\n        instance: getInstance(),\r\n      }).map(d => decorateColumn(d, defaultColumn)),\r\n    [\r\n      getHooks,\r\n      allColumns,\r\n      getInstance,\r\n      defaultColumn,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n\r\n  // Combine new visible columns with all columns\r\n  allColumns = React.useMemo(() => {\r\n    const columns = [...visibleColumns]\r\n\r\n    allColumns.forEach(column => {\r\n      if (!columns.find(d => d.id === column.id)) {\r\n        columns.push(column)\r\n      }\r\n    })\r\n\r\n    return columns\r\n  }, [allColumns, visibleColumns])\r\n  getInstance().allColumns = allColumns\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const duplicateColumns = allColumns.filter((column, i) => {\r\n      return allColumns.findIndex(d => d.id === column.id) !== i\r\n    })\r\n\r\n    if (duplicateColumns.length) {\r\n      console.info(allColumns)\r\n      throw new Error(\r\n        `Duplicate columns were found with ids: \"${duplicateColumns\r\n          .map(d => d.id)\r\n          .join(', ')}\" in the columns array above`\r\n      )\r\n    }\r\n  }\r\n\r\n  // Make the headerGroups\r\n  const headerGroups = React.useMemo(\r\n    () =>\r\n      reduceHooks(\r\n        getHooks().headerGroups,\r\n        makeHeaderGroups(visibleColumns, defaultColumn),\r\n        getInstance()\r\n      ),\r\n    [\r\n      getHooks,\r\n      visibleColumns,\r\n      defaultColumn,\r\n      getInstance,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n  getInstance().headerGroups = headerGroups\r\n\r\n  // Get the first level of headers\r\n  const headers = React.useMemo(\r\n    () => (headerGroups.length ? headerGroups[0].headers : []),\r\n    [headerGroups]\r\n  )\r\n  getInstance().headers = headers\r\n\r\n  // Provide a flat header list for utilities\r\n  getInstance().flatHeaders = headerGroups.reduce(\r\n    (all, headerGroup) => [...all, ...headerGroup.headers],\r\n    []\r\n  )\r\n\r\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\r\n\r\n  // Filter columns down to visible ones\r\n  const visibleColumnsDep = visibleColumns\r\n    .filter(d => d.isVisible)\r\n    .map(d => d.id)\r\n    .sort()\r\n    .join('_')\r\n\r\n  visibleColumns = React.useMemo(\r\n    () => visibleColumns.filter(d => d.isVisible),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [visibleColumns, visibleColumnsDep]\r\n  )\r\n  getInstance().visibleColumns = visibleColumns\r\n\r\n  // Header Visibility is needed by this point\r\n  const [\r\n    totalColumnsMinWidth,\r\n    totalColumnsWidth,\r\n    totalColumnsMaxWidth,\r\n  ] = calculateHeaderWidths(headers)\r\n\r\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\r\n  getInstance().totalColumnsWidth = totalColumnsWidth\r\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\r\n\r\n  loopHooks(getHooks().useInstance, getInstance())\r\n\r\n  // Each materialized header needs to be assigned a render function and other\r\n  // prop getter properties here.\r\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\r\n    column => {\r\n      // Give columns/headers rendering power\r\n      column.render = makeRenderer(getInstance(), column)\r\n\r\n      // Give columns/headers a default getHeaderProps\r\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\r\n        instance: getInstance(),\r\n        column,\r\n      })\r\n\r\n      // Give columns/headers a default getFooterProps\r\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\r\n        instance: getInstance(),\r\n        column,\r\n      })\r\n    }\r\n  )\r\n\r\n  getInstance().headerGroups = React.useMemo(\r\n    () =>\r\n      headerGroups.filter((headerGroup, i) => {\r\n        // Filter out any headers and headerGroups that don't have visible columns\r\n        headerGroup.headers = headerGroup.headers.filter(column => {\r\n          const recurse = headers =>\r\n            headers.filter(column => {\r\n              if (column.headers) {\r\n                return recurse(column.headers)\r\n              }\r\n              return column.isVisible\r\n            }).length\r\n          if (column.headers) {\r\n            return recurse(column.headers)\r\n          }\r\n          return column.isVisible\r\n        })\r\n\r\n        // Give headerGroups getRowProps\r\n        if (headerGroup.headers.length) {\r\n          headerGroup.getHeaderGroupProps = makePropGetter(\r\n            getHooks().getHeaderGroupProps,\r\n            { instance: getInstance(), headerGroup, index: i }\r\n          )\r\n\r\n          headerGroup.getFooterGroupProps = makePropGetter(\r\n            getHooks().getFooterGroupProps,\r\n            { instance: getInstance(), headerGroup, index: i }\r\n          )\r\n\r\n          return true\r\n        }\r\n\r\n        return false\r\n      }),\r\n    [headerGroups, getInstance, getHooks]\r\n  )\r\n\r\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\r\n\r\n  // The prepareRow function is absolutely necessary and MUST be called on\r\n  // any rows the user wishes to be displayed.\r\n\r\n  getInstance().prepareRow = React.useCallback(\r\n    row => {\r\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\r\n        instance: getInstance(),\r\n        row,\r\n      })\r\n\r\n      // Build the visible cells for each row\r\n      row.allCells = allColumns.map(column => {\r\n        const value = row.values[column.id]\r\n\r\n        const cell = {\r\n          column,\r\n          row,\r\n          value,\r\n        }\r\n\r\n        // Give each cell a getCellProps base\r\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\r\n          instance: getInstance(),\r\n          cell,\r\n        })\r\n\r\n        // Give each cell a renderer function (supports multiple renderers)\r\n        cell.render = makeRenderer(getInstance(), column, {\r\n          row,\r\n          cell,\r\n          value,\r\n        })\r\n\r\n        return cell\r\n      })\r\n\r\n      row.cells = visibleColumns.map(column =>\r\n        row.allCells.find(cell => cell.column.id === column.id)\r\n      )\r\n\r\n      // need to apply any row specific hooks (useExpanded requires this)\r\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\r\n    },\r\n    [getHooks, getInstance, allColumns, visibleColumns]\r\n  )\r\n\r\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\r\n    instance: getInstance(),\r\n  })\r\n\r\n  getInstance().getTableBodyProps = makePropGetter(\r\n    getHooks().getTableBodyProps,\r\n    {\r\n      instance: getInstance(),\r\n    }\r\n  )\r\n\r\n  loopHooks(getHooks().useFinalInstance, getInstance())\r\n\r\n  return getInstance()\r\n}\r\n\r\nfunction calculateHeaderWidths(headers, left = 0) {\r\n  let sumTotalMinWidth = 0\r\n  let sumTotalWidth = 0\r\n  let sumTotalMaxWidth = 0\r\n  let sumTotalFlexWidth = 0\r\n\r\n  headers.forEach(header => {\r\n    let { headers: subHeaders } = header\r\n\r\n    header.totalLeft = left\r\n\r\n    if (subHeaders && subHeaders.length) {\r\n      const [\r\n        totalMinWidth,\r\n        totalWidth,\r\n        totalMaxWidth,\r\n        totalFlexWidth,\r\n      ] = calculateHeaderWidths(subHeaders, left)\r\n      header.totalMinWidth = totalMinWidth\r\n      header.totalWidth = totalWidth\r\n      header.totalMaxWidth = totalMaxWidth\r\n      header.totalFlexWidth = totalFlexWidth\r\n    } else {\r\n      header.totalMinWidth = header.minWidth\r\n      header.totalWidth = Math.min(\r\n        Math.max(header.minWidth, header.width),\r\n        header.maxWidth\r\n      )\r\n      header.totalMaxWidth = header.maxWidth\r\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\r\n    }\r\n    if (header.isVisible) {\r\n      left += header.totalWidth\r\n      sumTotalMinWidth += header.totalMinWidth\r\n      sumTotalWidth += header.totalWidth\r\n      sumTotalMaxWidth += header.totalMaxWidth\r\n      sumTotalFlexWidth += header.totalFlexWidth\r\n    }\r\n  })\r\n\r\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\r\n}\r\n\r\nfunction accessRowsForColumn({\r\n  data,\r\n  rows,\r\n  flatRows,\r\n  rowsById,\r\n  column,\r\n  getRowId,\r\n  getSubRows,\r\n  accessValueHooks,\r\n  getInstance,\r\n}) {\r\n  // Access the row's data column-by-column\r\n  // We do it this way so we can incrementally add materialized\r\n  // columns after the first pass and avoid excessive looping\r\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\r\n    // Keep the original reference around\r\n    const original = originalRow\r\n\r\n    const id = getRowId(originalRow, rowIndex, parent)\r\n\r\n    let row = rowsById[id]\r\n\r\n    // If the row hasn't been created, let's make it\r\n    if (!row) {\r\n      row = {\r\n        id,\r\n        original,\r\n        index: rowIndex,\r\n        depth,\r\n        cells: [{}], // This is a dummy cell\r\n      }\r\n\r\n      // Override common array functions (and the dummy cell's getCellProps function)\r\n      // to show an error if it is accessed without calling prepareRow\r\n      row.cells.map = unpreparedAccessWarning\r\n      row.cells.filter = unpreparedAccessWarning\r\n      row.cells.forEach = unpreparedAccessWarning\r\n      row.cells[0].getCellProps = unpreparedAccessWarning\r\n\r\n      // Create the cells and values\r\n      row.values = {}\r\n\r\n      // Push this row into the parentRows array\r\n      parentRows.push(row)\r\n      // Keep track of every row in a flat array\r\n      flatRows.push(row)\r\n      // Also keep track of every row by its ID\r\n      rowsById[id] = row\r\n\r\n      // Get the original subrows\r\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\r\n\r\n      // Then recursively access them\r\n      if (row.originalSubRows) {\r\n        const subRows = []\r\n        row.originalSubRows.forEach((d, i) =>\r\n          accessRow(d, i, depth + 1, row, subRows)\r\n        )\r\n        // Keep the new subRows array on the row\r\n        row.subRows = subRows\r\n      }\r\n    } else if (row.subRows) {\r\n      // If the row exists, then it's already been accessed\r\n      // Keep recursing, but don't worry about passing the\r\n      // accumlator array (those rows already exist)\r\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\r\n    }\r\n\r\n    // If the column has an accessor, use it to get a value\r\n    if (column.accessor) {\r\n      row.values[column.id] = column.accessor(\r\n        originalRow,\r\n        rowIndex,\r\n        row,\r\n        parentRows,\r\n        data\r\n      )\r\n    }\r\n\r\n    // Allow plugins to manipulate the column value\r\n    row.values[column.id] = reduceHooks(\r\n      accessValueHooks,\r\n      row.values[column.id],\r\n      {\r\n        row,\r\n        column,\r\n        instance: getInstance(),\r\n      },\r\n      true\r\n    )\r\n  }\r\n\r\n  data.forEach((originalRow, rowIndex) =>\r\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { expandRows } from '../utils'\r\n\r\nimport {\r\n  useGetLatest,\r\n  actions,\r\n  useMountedLayoutEffect,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n} from '../publicUtils'\r\n\r\n// Actions\r\nactions.resetExpanded = 'resetExpanded'\r\nactions.toggleRowExpanded = 'toggleRowExpanded'\r\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\r\n\r\nexport const useExpanded = hooks => {\r\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\r\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseExpanded.pluginName = 'useExpanded'\r\n\r\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onClick: e => {\r\n      instance.toggleAllRowsExpanded()\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    title: 'Toggle All Rows Expanded',\r\n  },\r\n]\r\n\r\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\r\n  props,\r\n  {\r\n    onClick: () => {\r\n      row.toggleRowExpanded()\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    title: 'Toggle Row Expanded',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      expanded: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetExpanded) {\r\n    return {\r\n      ...state,\r\n      expanded: instance.initialState.expanded || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllRowsExpanded) {\r\n    const { value } = action\r\n    const { isAllRowsExpanded, rowsById } = instance\r\n\r\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\r\n\r\n    if (expandAll) {\r\n      const expanded = {}\r\n\r\n      Object.keys(rowsById).forEach(rowId => {\r\n        expanded[rowId] = true\r\n      })\r\n\r\n      return {\r\n        ...state,\r\n        expanded,\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      expanded: {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleRowExpanded) {\r\n    const { id, value: setExpanded } = action\r\n    const exists = state.expanded[id]\r\n\r\n    const shouldExist =\r\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\r\n\r\n    if (!exists && shouldExist) {\r\n      return {\r\n        ...state,\r\n        expanded: {\r\n          ...state.expanded,\r\n          [id]: true,\r\n        },\r\n      }\r\n    } else if (exists && !shouldExist) {\r\n      const { [id]: _, ...rest } = state.expanded\r\n      return {\r\n        ...state,\r\n        expanded: rest,\r\n      }\r\n    } else {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    rowsById,\r\n    manualExpandedKey = 'expanded',\r\n    paginateExpandedRows = true,\r\n    expandSubRows = true,\r\n    autoResetExpanded = true,\r\n    getHooks,\r\n    plugins,\r\n    state: { expanded },\r\n    dispatch,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\r\n    'useExpanded'\r\n  )\r\n\r\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\r\n\r\n  let isAllRowsExpanded = Boolean(\r\n    Object.keys(rowsById).length && Object.keys(expanded).length\r\n  )\r\n\r\n  if (isAllRowsExpanded) {\r\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\r\n      isAllRowsExpanded = false\r\n    }\r\n  }\r\n\r\n  // Bypass any effects from firing when this changes\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetExpanded()) {\r\n      dispatch({ type: actions.resetExpanded })\r\n    }\r\n  }, [dispatch, data])\r\n\r\n  const toggleRowExpanded = React.useCallback(\r\n    (id, value) => {\r\n      dispatch({ type: actions.toggleRowExpanded, id, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleAllRowsExpanded = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const expandedRows = React.useMemo(() => {\r\n    if (paginateExpandedRows) {\r\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\r\n    }\r\n\r\n    return rows\r\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\r\n\r\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\r\n    expanded,\r\n  ])\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const getToggleAllRowsExpandedProps = makePropGetter(\r\n    getHooks().getToggleAllRowsExpandedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    preExpandedRows: rows,\r\n    expandedRows,\r\n    rows: expandedRows,\r\n    expandedDepth,\r\n    isAllRowsExpanded,\r\n    toggleRowExpanded,\r\n    toggleAllRowsExpanded,\r\n    getToggleAllRowsExpandedProps,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\r\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\r\n\r\n  row.getToggleRowExpandedProps = makePropGetter(\r\n    getHooks().getToggleRowExpandedProps,\r\n    {\r\n      instance,\r\n      row,\r\n    }\r\n  )\r\n}\r\n\r\nfunction findExpandedDepth(expanded) {\r\n  let maxDepth = 0\r\n\r\n  Object.keys(expanded).forEach(id => {\r\n    const splitId = id.split('.')\r\n    maxDepth = Math.max(maxDepth, splitId.length)\r\n  })\r\n\r\n  return maxDepth\r\n}\r\n","export const text = (rows, ids, filterValue) => {\r\n  rows = rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return String(rowValue)\r\n        .toLowerCase()\r\n        .includes(String(filterValue).toLowerCase())\r\n    })\r\n  })\r\n  return rows\r\n}\r\n\r\ntext.autoRemove = val => !val\r\n\r\nexport const exactText = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue !== undefined\r\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\r\n        : true\r\n    })\r\n  })\r\n}\r\n\r\nexactText.autoRemove = val => !val\r\n\r\nexport const exactTextCase = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue !== undefined\r\n        ? String(rowValue) === String(filterValue)\r\n        : true\r\n    })\r\n  })\r\n}\r\n\r\nexactTextCase.autoRemove = val => !val\r\n\r\nexport const includes = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue.includes(filterValue)\r\n    })\r\n  })\r\n}\r\n\r\nincludes.autoRemove = val => !val || !val.length\r\n\r\nexport const includesAll = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return (\r\n        rowValue &&\r\n        rowValue.length &&\r\n        filterValue.every(val => rowValue.includes(val))\r\n      )\r\n    })\r\n  })\r\n}\r\n\r\nincludesAll.autoRemove = val => !val || !val.length\r\n\r\nexport const includesSome = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return (\r\n        rowValue &&\r\n        rowValue.length &&\r\n        filterValue.some(val => rowValue.includes(val))\r\n      )\r\n    })\r\n  })\r\n}\r\n\r\nincludesSome.autoRemove = val => !val || !val.length\r\n\r\nexport const includesValue = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return filterValue.includes(rowValue)\r\n    })\r\n  })\r\n}\r\n\r\nincludesValue.autoRemove = val => !val || !val.length\r\n\r\nexport const exact = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue === filterValue\r\n    })\r\n  })\r\n}\r\n\r\nexact.autoRemove = val => typeof val === 'undefined'\r\n\r\nexport const equals = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      // eslint-disable-next-line eqeqeq\r\n      return rowValue == filterValue\r\n    })\r\n  })\r\n}\r\n\r\nequals.autoRemove = val => val == null\r\n\r\nexport const between = (rows, ids, filterValue) => {\r\n  let [min, max] = filterValue || []\r\n\r\n  min = typeof min === 'number' ? min : -Infinity\r\n  max = typeof max === 'number' ? max : Infinity\r\n\r\n  if (min > max) {\r\n    const temp = min\r\n    min = max\r\n    max = temp\r\n  }\r\n\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue >= min && rowValue <= max\r\n    })\r\n  })\r\n}\r\n\r\nbetween.autoRemove = val =>\r\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\r\n","import React from 'react'\r\n\r\nimport {\r\n  getFirstDefined,\r\n  getFilterMethod,\r\n  shouldAutoRemoveFilter,\r\n} from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  useGetLatest,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n  reduceMappings,\r\n} from '../publicUtils'\r\n\r\nimport * as filterTypes from '../filterTypes'\r\n\r\n// Actions\r\nactions.resetFilters = 'resetFilters'\r\nactions.setFilter = 'setFilter'\r\nactions.setAllFilters = 'setAllFilters'\r\n\r\nexport const useFilters = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseFilters.pluginName = 'useFilters'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      filters: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetFilters) {\r\n    return {\r\n      ...state,\r\n      filters: instance.initialState.filters || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setFilter) {\r\n    const { columnId, filterValue } = action\r\n    const { allColumns, filterTypes: userFilterTypes } = instance\r\n\r\n    const column = allColumns.find(d => d.id === columnId)\r\n\r\n    if (!column) {\r\n      throw new Error(\r\n        `React-Table: Could not find a column with id: ${columnId}`\r\n      )\r\n    }\r\n\r\n    const filterMethod = getFilterMethod(\r\n      column.filter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    const previousfilter = state.filters.find(d => d.id === columnId)\r\n\r\n    const newFilter = functionalUpdate(\r\n      filterValue,\r\n      previousfilter && previousfilter.value\r\n    )\r\n\r\n    //\r\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\r\n      return {\r\n        ...state,\r\n        filters: state.filters.filter(d => d.id !== columnId),\r\n      }\r\n    }\r\n\r\n    if (previousfilter) {\r\n      return {\r\n        ...state,\r\n        filters: state.filters.map(d => {\r\n          if (d.id === columnId) {\r\n            return { id: columnId, value: newFilter }\r\n          }\r\n          return d\r\n        }),\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      filters: [...state.filters, { id: columnId, value: newFilter }],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setAllFilters) {\r\n    const { filters } = action\r\n    const { allColumns, filterTypes: userFilterTypes } = instance\r\n\r\n    return {\r\n      ...state,\r\n      // Filter out undefined values\r\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\r\n        const column = allColumns.find(d => d.id === filter.id)\r\n        const filterMethod = getFilterMethod(\r\n          column.filter,\r\n          userFilterTypes || {},\r\n          filterTypes\r\n        )\r\n\r\n        if (\r\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\r\n        ) {\r\n          return false\r\n        }\r\n        return true\r\n      }),\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    filterTypes: userFilterTypes,\r\n    manualFilters,\r\n    defaultCanFilter = false,\r\n    disableFilters,\r\n    state: { filters },\r\n    dispatch,\r\n    autoResetFilters = true,\r\n  } = instance\r\n\r\n  const setFilter = React.useCallback(\r\n    (columnId, filterValue) => {\r\n      dispatch({ type: actions.setFilter, columnId, filterValue })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const setAllFilters = React.useCallback(\r\n    filters => {\r\n      dispatch({\r\n        type: actions.setAllFilters,\r\n        filters,\r\n      })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      id,\r\n      accessor,\r\n      defaultCanFilter: columnDefaultCanFilter,\r\n      disableFilters: columnDisableFilters,\r\n    } = column\r\n\r\n    // Determine if a column is filterable\r\n    column.canFilter = accessor\r\n      ? getFirstDefined(\r\n          columnDisableFilters === true ? false : undefined,\r\n          disableFilters === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\r\n\r\n    // Provide the column a way of updating the filter value\r\n    column.setFilter = val => setFilter(column.id, val)\r\n\r\n    // Provide the current filter value to the column for\r\n    // convenience\r\n    const found = filters.find(d => d.id === id)\r\n    column.filterValue = found && found.value\r\n  })\r\n\r\n  const [\r\n    filteredRows,\r\n    filteredFlatRows,\r\n    filteredRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualFilters || !filters.length) {\r\n      return [rows, flatRows, rowsById]\r\n    }\r\n\r\n    //partially apply useFilterType and filterTypes to avoid having to pass these around\r\n    const prepareFilter = filter =>\r\n      getFilterMethod(filter, userFilterTypes || {}, filterTypes)\r\n\r\n    const columnFilterPairs = filters.map(filterOption => {\r\n      const { id: columnId, value: filterValue } = filterOption\r\n\r\n      //Find the column this filter is refering to\r\n      const column = allColumns.find(d => d.id === columnId)\r\n      //Create the filter function for this column\r\n      const filter = produceFilterFromColumn(column, filterValue, prepareFilter)\r\n\r\n      return { column, filter }\r\n    })\r\n\r\n    //main row filters update their column with their current filter progress\r\n    const mainRowFilters = columnFilterPairs.map(\r\n      ({ column, filter }) => rows => {\r\n        const filteredRows = filter(rows)\r\n        Object.assign(column, { preFilteredRows: rows, filteredRows })\r\n        return filteredRows\r\n      }\r\n    )\r\n\r\n    //sub row filters DO NOT update the column with their \"in progress\" filtered values\r\n    const subRowFilters = columnFilterPairs.map(({ filter }) => filter)\r\n\r\n    //Build a function that recusively evaluates rows starting from a row\r\n    const filterSubRows = row => reduceMappings(row.subRows, subRowFilters)\r\n    const evaluateRow = (row, depth = 0) =>\r\n      reduceMappings(row, [\r\n        //expose the current depth to the filter\r\n        row => ({ ...row, depth }),\r\n\r\n        //recurse the subrows first\r\n        row => ({\r\n          ...row,\r\n          subRows: row.subRows?.map(row => evaluateRow(row, depth + 1)) || [],\r\n        }),\r\n\r\n        //filter and collect the subrows\r\n        row => {\r\n          //collect the flat rows before filtering\r\n          const [subRowsFlat, subRowsById] = row.subRows.reduce(\r\n            ([filteredFlatRows, filteredRowsById], row) => [\r\n              [...filteredFlatRows, ...row.filteredFlatRows],\r\n              { ...filteredRowsById, ...row.filteredRowsById },\r\n            ],\r\n            [[], {}]\r\n          )\r\n\r\n          const filteredSubRows = filterSubRows(row)\r\n          return {\r\n            ...row,\r\n            subRows: filteredSubRows,\r\n            prefilteredSubRows: row.subRows,\r\n            filteredFlatRows: [...filteredSubRows, ...subRowsFlat],\r\n            filteredRowsById: {\r\n              ...Object.fromEntries(filteredSubRows.map(row => [row.id, row])),\r\n              ...subRowsById,\r\n            },\r\n          }\r\n        },\r\n      ])\r\n\r\n    //evaluate each row\r\n    const evaluatedRows = rows.map(row => evaluateRow(row))\r\n\r\n    //filter the main rows with thier special filters\r\n    const filteredRows = reduceMappings(evaluatedRows, mainRowFilters)\r\n\r\n    //do this first so we get a lookup table\r\n    const filteredMainRowsById = Object.fromEntries(\r\n      filteredRows.map(row => [row.id, row])\r\n    )\r\n\r\n    //collect filteredFlatRows, filteredRowsById\r\n    const [filteredFlatRows, filteredRowsById] = evaluatedRows.reduce(\r\n      ([filteredFlatRows, filteredRowsById], row) => [\r\n        [\r\n          ...filteredFlatRows,\r\n          ...([filteredRowsById[row.id]] || []), // to ensure that flatRows occurs in depth first order we need to conditionally add it here\r\n          ...row.filteredFlatRows,\r\n        ],\r\n        { ...filteredRowsById, ...row.filteredRowsById },\r\n      ],\r\n      [[], filteredMainRowsById] //since order doesn't matter in objects prepopulate with the main rows\r\n    )\r\n\r\n    return [filteredRows, filteredFlatRows, filteredRowsById]\r\n  }, [\r\n    manualFilters,\r\n    filters,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    userFilterTypes,\r\n  ])\r\n\r\n  React.useMemo(() => {\r\n    // Now that each filtered column has it's partially filtered rows,\r\n    // lets assign the final filtered rows to all of the other columns\r\n    const nonFilteredColumns = allColumns.filter(\r\n      column => !filters.find(d => d.id === column.id)\r\n    )\r\n\r\n    // This essentially enables faceted filter options to be built easily\r\n    // using every column's preFilteredRows value\r\n    nonFilteredColumns.forEach(column => {\r\n      column.preFilteredRows = filteredRows\r\n      column.filteredRows = filteredRows\r\n    })\r\n  }, [filteredRows, filters, allColumns])\r\n\r\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetFilters()) {\r\n      dispatch({ type: actions.resetFilters })\r\n    }\r\n  }, [dispatch, manualFilters ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preFilteredRows: rows,\r\n    preFilteredFlatRows: flatRows,\r\n    preFilteredRowsById: rowsById,\r\n    filteredRows,\r\n    filteredFlatRows,\r\n    filteredRowsById,\r\n    rows: filteredRows,\r\n    flatRows: filteredFlatRows,\r\n    rowsById: filteredRowsById,\r\n    setFilter,\r\n    setAllFilters,\r\n  })\r\n}\r\n\r\nconst produceFilterFromColumn = (column, filterValue, getFilterMethod) => {\r\n  if (!column) return rows => rows\r\n\r\n  const filterMethod = getFilterMethod(column.filter)\r\n\r\n  if (!filterMethod) {\r\n    console.warn(\r\n      `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\r\n    )\r\n    return rows => rows\r\n  }\r\n\r\n  return rows => filterMethod(rows, [column.id], filterValue)\r\n}\r\n\r\nexport default useFilters\r\n\r\n//This allows you to use any existing filter as a tree filter.\r\n//This HOC is inherently slow (does 1 extra list traversal)\r\n//If you find that this causes table to slow down it's best to implement this yourself\r\n/* eg.\r\n\t{\r\n\t  Header: \"Name\",\r\n\t  accessor: \"name\",\r\n\t  filter: makeTreeFilter(text, \"subRowHasMatch\")\r\n\t}\r\n  */\r\n\r\nexport function makeTreeFilter(\r\n  filter = filterTypes.text,\r\n  deep_filter_key = 'deep_filtered'\r\n) {\r\n  //(row, ids, filterValue)\r\n  return (rows, ids, filterValue) => {\r\n    const filteredRowsById = Object.fromEntries(\r\n      filter(rows, ids, filterValue).map(row => [row.id, row])\r\n    )\r\n\r\n    //rebuild the list from subRows that have a descendant that matches the filter or things matched throught the userFilter\r\n    return rows.reduce((rows, row) => {\r\n      const matchedRow = filteredRowsById[row.id]\r\n      if (matchedRow) {\r\n        matchedRow[deep_filter_key] = false //this flag indicates that this row was filtered directly\r\n        return [...rows, matchedRow]\r\n      } else if (row.filteredFlatRows.length > 0) {\r\n        row[deep_filter_key] = true\r\n        return [...rows, row]\r\n      } else {\r\n        return rows\r\n      }\r\n    }, [])\r\n  }\r\n}","import React from 'react'\r\n\r\nimport {\r\n  getFilterMethod,\r\n  shouldAutoRemoveFilter,\r\n  getFirstDefined,\r\n} from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  useMountedLayoutEffect,\r\n  functionalUpdate,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport * as filterTypes from '../filterTypes'\r\n\r\n// Actions\r\nactions.resetGlobalFilter = 'resetGlobalFilter'\r\nactions.setGlobalFilter = 'setGlobalFilter'\r\n\r\nexport const useGlobalFilter = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseGlobalFilter.pluginName = 'useGlobalFilter'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.resetGlobalFilter) {\r\n    return {\r\n      ...state,\r\n      globalFilter: instance.initialState.globalFilter || undefined,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setGlobalFilter) {\r\n    const { filterValue } = action\r\n    const { userFilterTypes } = instance\r\n\r\n    const filterMethod = getFilterMethod(\r\n      instance.globalFilter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\r\n\r\n    //\r\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\r\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\r\n      return stateWithoutGlobalFilter\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      globalFilter: newFilter,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    filterTypes: userFilterTypes,\r\n    globalFilter,\r\n    manualGlobalFilter,\r\n    state: { globalFilter: globalFilterValue },\r\n    dispatch,\r\n    autoResetGlobalFilter = true,\r\n    disableGlobalFilter,\r\n  } = instance\r\n\r\n  const setGlobalFilter = React.useCallback(\r\n    filterValue => {\r\n      dispatch({ type: actions.setGlobalFilter, filterValue })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // TODO: Create a filter cache for incremental high speed multi-filtering\r\n  // This gets pretty complicated pretty fast, since you have to maintain a\r\n  // cache for each row group (top-level rows, and each row's recursive subrows)\r\n  // This would make multi-filtering a lot faster though. Too far?\r\n\r\n  const [\r\n    globalFilteredRows,\r\n    globalFilteredFlatRows,\r\n    globalFilteredRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\r\n      return [rows, flatRows, rowsById]\r\n    }\r\n\r\n    const filteredFlatRows = []\r\n    const filteredRowsById = {}\r\n\r\n    const filterMethod = getFilterMethod(\r\n      globalFilter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    if (!filterMethod) {\r\n      console.warn(`Could not find a valid 'globalFilter' option.`)\r\n      return rows\r\n    }\r\n\r\n    allColumns.forEach(column => {\r\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\r\n\r\n      column.canFilter = getFirstDefined(\r\n        columnDisableGlobalFilter === true ? false : undefined,\r\n        disableGlobalFilter === true ? false : undefined,\r\n        true\r\n      )\r\n    })\r\n\r\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\r\n\r\n    // Filters top level and nested rows\r\n    const filterRows = filteredRows => {\r\n      filteredRows = filterMethod(\r\n        filteredRows,\r\n        filterableColumns.map(d => d.id),\r\n        globalFilterValue\r\n      )\r\n\r\n      filteredRows.forEach(row => {\r\n        filteredFlatRows.push(row)\r\n        filteredRowsById[row.id] = row\r\n\r\n        row.subRows =\r\n          row.subRows && row.subRows.length\r\n            ? filterRows(row.subRows)\r\n            : row.subRows\r\n      })\r\n\r\n      return filteredRows\r\n    }\r\n\r\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\r\n  }, [\r\n    manualGlobalFilter,\r\n    globalFilterValue,\r\n    globalFilter,\r\n    userFilterTypes,\r\n    allColumns,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    disableGlobalFilter,\r\n  ])\r\n\r\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetGlobalFilter()) {\r\n      dispatch({ type: actions.resetGlobalFilter })\r\n    }\r\n  }, [dispatch, manualGlobalFilter ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preGlobalFilteredRows: rows,\r\n    preGlobalFilteredFlatRows: flatRows,\r\n    preGlobalFilteredRowsById: rowsById,\r\n    globalFilteredRows,\r\n    globalFilteredFlatRows,\r\n    globalFilteredRowsById,\r\n    rows: globalFilteredRows,\r\n    flatRows: globalFilteredFlatRows,\r\n    rowsById: globalFilteredRowsById,\r\n    setGlobalFilter,\r\n    disableGlobalFilter,\r\n  })\r\n}\r\n","export function sum(values, aggregatedValues) {\r\n  // It's faster to just add the aggregations together instead of\r\n  // process leaf nodes individually\r\n  return aggregatedValues.reduce(\r\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\r\n    0\r\n  )\r\n}\r\n\r\nexport function min(values) {\r\n  let min = values[0] || 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      min = Math.min(min, value)\r\n    }\r\n  })\r\n\r\n  return min\r\n}\r\n\r\nexport function max(values) {\r\n  let max = values[0] || 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      max = Math.max(max, value)\r\n    }\r\n  })\r\n\r\n  return max\r\n}\r\n\r\nexport function minMax(values) {\r\n  let min = values[0] || 0\r\n  let max = values[0] || 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      min = Math.min(min, value)\r\n      max = Math.max(max, value)\r\n    }\r\n  })\r\n\r\n  return `${min}..${max}`\r\n}\r\n\r\nexport function average(values) {\r\n  return sum(null, values) / values.length\r\n}\r\n\r\nexport function median(values) {\r\n  if (!values.length) {\r\n    return null\r\n  }\r\n\r\n  const mid = Math.floor(values.length / 2)\r\n  const nums = [...values].sort((a, b) => a - b)\r\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\r\n}\r\n\r\nexport function unique(values) {\r\n  return Array.from(new Set(values).values())\r\n}\r\n\r\nexport function uniqueCount(values) {\r\n  return new Set(values).size\r\n}\r\n\r\nexport function count(values) {\r\n  return values.length\r\n}\r\n","import React from 'react'\r\n\r\nimport * as aggregations from '../aggregations'\r\n\r\nimport { getFirstDefined, flattenBy } from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nconst emptyArray = []\r\nconst emptyObject = {}\r\n\r\n// Actions\r\nactions.resetGroupBy = 'resetGroupBy'\r\nactions.setGroupBy = 'setGroupBy'\r\nactions.toggleGroupBy = 'toggleGroupBy'\r\n\r\nexport const useGroupBy = hooks => {\r\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\r\n    ...deps,\r\n    instance.state.groupBy,\r\n  ])\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseGroupBy.pluginName = 'useGroupBy'\r\n\r\nconst defaultGetGroupByToggleProps = (props, { header }) => [\r\n  props,\r\n  {\r\n    onClick: header.canGroupBy\r\n      ? e => {\r\n          e.persist()\r\n          header.toggleGroupBy()\r\n        }\r\n      : undefined,\r\n    style: {\r\n      cursor: header.canGroupBy ? 'pointer' : undefined,\r\n    },\r\n    title: 'Toggle GroupBy',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      groupBy: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetGroupBy) {\r\n    return {\r\n      ...state,\r\n      groupBy: instance.initialState.groupBy || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setGroupBy) {\r\n    const { value } = action\r\n    return {\r\n      ...state,\r\n      groupBy: value,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleGroupBy) {\r\n    const { columnId, value: setGroupBy } = action\r\n\r\n    const resolvedGroupBy =\r\n      typeof setGroupBy !== 'undefined'\r\n        ? setGroupBy\r\n        : !state.groupBy.includes(columnId)\r\n\r\n    if (resolvedGroupBy) {\r\n      return {\r\n        ...state,\r\n        groupBy: [...state.groupBy, columnId],\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      groupBy: state.groupBy.filter(d => d !== columnId),\r\n    }\r\n  }\r\n}\r\n\r\nfunction visibleColumns(\r\n  columns,\r\n  {\r\n    instance: {\r\n      state: { groupBy },\r\n    },\r\n  }\r\n) {\r\n  // Sort grouped columns to the start of the column list\r\n  // before the headers are built\r\n\r\n  const groupByColumns = groupBy\r\n    .map(g => columns.find(col => col.id === g))\r\n    .filter(Boolean)\r\n\r\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\r\n\r\n  columns = [...groupByColumns, ...nonGroupByColumns]\r\n\r\n  columns.forEach(column => {\r\n    column.isGrouped = groupBy.includes(column.id)\r\n    column.groupedIndex = groupBy.indexOf(column.id)\r\n  })\r\n\r\n  return columns\r\n}\r\n\r\nconst defaultUserAggregations = {}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    flatHeaders,\r\n    groupByFn = defaultGroupByFn,\r\n    manualGroupBy,\r\n    aggregations: userAggregations = defaultUserAggregations,\r\n    plugins,\r\n    state: { groupBy },\r\n    dispatch,\r\n    autoResetGroupBy = true,\r\n    disableGroupBy,\r\n    defaultCanGroupBy,\r\n    getHooks,\r\n  } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      accessor,\r\n      defaultGroupBy: defaultColumnGroupBy,\r\n      disableGroupBy: columnDisableGroupBy,\r\n    } = column\r\n\r\n    column.canGroupBy = accessor\r\n      ? getFirstDefined(\r\n          column.canGroupBy,\r\n          columnDisableGroupBy === true ? false : undefined,\r\n          disableGroupBy === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(\r\n          column.canGroupBy,\r\n          defaultColumnGroupBy,\r\n          defaultCanGroupBy,\r\n          false\r\n        )\r\n\r\n    if (column.canGroupBy) {\r\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\r\n    }\r\n\r\n    column.Aggregated = column.Aggregated || column.Cell\r\n  })\r\n\r\n  const toggleGroupBy = React.useCallback(\r\n    (columnId, value) => {\r\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const setGroupBy = React.useCallback(\r\n    value => {\r\n      dispatch({ type: actions.setGroupBy, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  flatHeaders.forEach(header => {\r\n    header.getGroupByToggleProps = makePropGetter(\r\n      getHooks().getGroupByToggleProps,\r\n      { instance: getInstance(), header }\r\n    )\r\n  })\r\n\r\n  const [\r\n    groupedRows,\r\n    groupedFlatRows,\r\n    groupedRowsById,\r\n    onlyGroupedFlatRows,\r\n    onlyGroupedRowsById,\r\n    nonGroupedFlatRows,\r\n    nonGroupedRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualGroupBy || !groupBy.length) {\r\n      return [\r\n        rows,\r\n        flatRows,\r\n        rowsById,\r\n        emptyArray,\r\n        emptyObject,\r\n        flatRows,\r\n        rowsById,\r\n      ]\r\n    }\r\n\r\n    // Ensure that the list of filtered columns exist\r\n    const existingGroupBy = groupBy.filter(g =>\r\n      allColumns.find(col => col.id === g)\r\n    )\r\n\r\n    // Find the columns that can or are aggregating\r\n    // Uses each column to aggregate rows into a single value\r\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\r\n      const values = {}\r\n\r\n      allColumns.forEach(column => {\r\n        // Don't aggregate columns that are in the groupBy\r\n        if (existingGroupBy.includes(column.id)) {\r\n          values[column.id] = groupedRows[0]\r\n            ? groupedRows[0].values[column.id]\r\n            : null\r\n          return\r\n        }\r\n\r\n        // Aggregate the values\r\n        let aggregateFn =\r\n          typeof column.aggregate === 'function'\r\n            ? column.aggregate\r\n            : userAggregations[column.aggregate] ||\r\n              aggregations[column.aggregate]\r\n\r\n        if (aggregateFn) {\r\n          // Get the columnValues to aggregate\r\n          const groupedValues = groupedRows.map(row => row.values[column.id])\r\n\r\n          // Get the columnValues to aggregate\r\n          const leafValues = leafRows.map(row => {\r\n            let columnValue = row.values[column.id]\r\n\r\n            if (!depth && column.aggregateValue) {\r\n              const aggregateValueFn =\r\n                typeof column.aggregateValue === 'function'\r\n                  ? column.aggregateValue\r\n                  : userAggregations[column.aggregateValue] ||\r\n                    aggregations[column.aggregateValue]\r\n\r\n              if (!aggregateValueFn) {\r\n                console.info({ column })\r\n                throw new Error(\r\n                  `React Table: Invalid column.aggregateValue option for column listed above`\r\n                )\r\n              }\r\n\r\n              columnValue = aggregateValueFn(columnValue, row, column)\r\n            }\r\n            return columnValue\r\n          })\r\n\r\n          values[column.id] = aggregateFn(leafValues, groupedValues)\r\n        } else if (column.aggregate) {\r\n          console.info({ column })\r\n          throw new Error(\r\n            `React Table: Invalid column.aggregate option for column listed above`\r\n          )\r\n        } else {\r\n          values[column.id] = null\r\n        }\r\n      })\r\n\r\n      return values\r\n    }\r\n\r\n    let groupedFlatRows = []\r\n    const groupedRowsById = {}\r\n    const onlyGroupedFlatRows = []\r\n    const onlyGroupedRowsById = {}\r\n    const nonGroupedFlatRows = []\r\n    const nonGroupedRowsById = {}\r\n\r\n    // Recursively group the data\r\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\r\n      // This is the last level, just return the rows\r\n      if (depth === existingGroupBy.length) {\r\n        return rows\r\n      }\r\n\r\n      const columnId = existingGroupBy[depth]\r\n\r\n      // Group the rows together for this level\r\n      let rowGroupsMap = groupByFn(rows, columnId)\r\n\r\n      // Peform aggregations for each group\r\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\r\n        ([groupByVal, groupedRows], index) => {\r\n          let id = `${columnId}:${groupByVal}`\r\n          id = parentId ? `${parentId}>${id}` : id\r\n\r\n          // First, Recurse to group sub rows before aggregation\r\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\r\n\r\n          // Flatten the leaf rows of the rows in this group\r\n          const leafRows = depth\r\n            ? flattenBy(groupedRows, 'leafRows')\r\n            : groupedRows\r\n\r\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\r\n\r\n          const row = {\r\n            id,\r\n            isGrouped: true,\r\n            groupByID: columnId,\r\n            groupByVal,\r\n            values,\r\n            subRows,\r\n            leafRows,\r\n            depth,\r\n            index,\r\n          }\r\n\r\n          subRows.forEach(subRow => {\r\n            groupedFlatRows.push(subRow)\r\n            groupedRowsById[subRow.id] = subRow\r\n            if (subRow.isGrouped) {\r\n              onlyGroupedFlatRows.push(subRow)\r\n              onlyGroupedRowsById[subRow.id] = subRow\r\n            } else {\r\n              nonGroupedFlatRows.push(subRow)\r\n              nonGroupedRowsById[subRow.id] = subRow\r\n            }\r\n          })\r\n\r\n          return row\r\n        }\r\n      )\r\n\r\n      return aggregatedGroupedRows\r\n    }\r\n\r\n    const groupedRows = groupUpRecursively(rows)\r\n\r\n    groupedRows.forEach(subRow => {\r\n      groupedFlatRows.push(subRow)\r\n      groupedRowsById[subRow.id] = subRow\r\n      if (subRow.isGrouped) {\r\n        onlyGroupedFlatRows.push(subRow)\r\n        onlyGroupedRowsById[subRow.id] = subRow\r\n      } else {\r\n        nonGroupedFlatRows.push(subRow)\r\n        nonGroupedRowsById[subRow.id] = subRow\r\n      }\r\n    })\r\n\r\n    // Assign the new data\r\n    return [\r\n      groupedRows,\r\n      groupedFlatRows,\r\n      groupedRowsById,\r\n      onlyGroupedFlatRows,\r\n      onlyGroupedRowsById,\r\n      nonGroupedFlatRows,\r\n      nonGroupedRowsById,\r\n    ]\r\n  }, [\r\n    manualGroupBy,\r\n    groupBy,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    userAggregations,\r\n    groupByFn,\r\n  ])\r\n\r\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetGroupBy()) {\r\n      dispatch({ type: actions.resetGroupBy })\r\n    }\r\n  }, [dispatch, manualGroupBy ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preGroupedRows: rows,\r\n    preGroupedFlatRow: flatRows,\r\n    preGroupedRowsById: rowsById,\r\n    groupedRows,\r\n    groupedFlatRows,\r\n    groupedRowsById,\r\n    onlyGroupedFlatRows,\r\n    onlyGroupedRowsById,\r\n    nonGroupedFlatRows,\r\n    nonGroupedRowsById,\r\n    rows: groupedRows,\r\n    flatRows: groupedFlatRows,\r\n    rowsById: groupedRowsById,\r\n    toggleGroupBy,\r\n    setGroupBy,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row) {\r\n  row.allCells.forEach(cell => {\r\n    // Grouped cells are in the groupBy and the pivot cell for the row\r\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\r\n    // Placeholder cells are any columns in the groupBy that are not grouped\r\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\r\n    // Aggregated cells are not grouped, not repeated, but still have subRows\r\n    cell.isAggregated =\r\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\r\n  })\r\n}\r\n\r\nexport function defaultGroupByFn(rows, columnId) {\r\n  return rows.reduce((prev, row, i) => {\r\n    // TODO: Might want to implement a key serializer here so\r\n    // irregular column values can still be grouped if needed?\r\n    const resKey = `${row.values[columnId]}`\r\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\r\n    prev[resKey].push(row)\r\n    return prev\r\n  }, {})\r\n}\r\n","const reSplitAlphaNumeric = /([0-9]+)/gm\r\n\r\n// Mixed sorting is slow, but very inclusive of many edge cases.\r\n// It handles numbers, mixed alphanumeric combinations, and even\r\n// null, undefined, and Infinity\r\nexport const alphanumeric = (rowA, rowB, columnId) => {\r\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\r\n\r\n  // Force to strings (or \"\" for unsupported types)\r\n  a = toString(a)\r\n  b = toString(b)\r\n\r\n  // Split on number groups, but keep the delimiter\r\n  // Then remove falsey split values\r\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\r\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\r\n\r\n  // While\r\n  while (a.length && b.length) {\r\n    let aa = a.shift()\r\n    let bb = b.shift()\r\n\r\n    const an = parseInt(aa, 10)\r\n    const bn = parseInt(bb, 10)\r\n\r\n    const combo = [an, bn].sort()\r\n\r\n    // Both are string\r\n    if (isNaN(combo[0])) {\r\n      if (aa > bb) {\r\n        return 1\r\n      }\r\n      if (bb > aa) {\r\n        return -1\r\n      }\r\n      continue\r\n    }\r\n\r\n    // One is a string, one is a number\r\n    if (isNaN(combo[1])) {\r\n      return isNaN(an) ? -1 : 1\r\n    }\r\n\r\n    // Both are numbers\r\n    if (an > bn) {\r\n      return 1\r\n    }\r\n    if (bn > an) {\r\n      return -1\r\n    }\r\n  }\r\n\r\n  return a.length - b.length\r\n}\r\nexport function datetime(rowA, rowB, columnId) {\r\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\r\n\r\n  a = a.getTime()\r\n  b = b.getTime()\r\n\r\n  return compareBasic(a, b)\r\n}\r\n\r\nexport function basic(rowA, rowB, columnId) {\r\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\r\n\r\n  return compareBasic(a, b)\r\n}\r\n\r\nexport function string(rowA, rowB, columnId) {\r\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\r\n\r\n  a = a.split('').filter(Boolean)\r\n  b = b.split('').filter(Boolean)\r\n\r\n  while (a.length && b.length) {\r\n    let aa = a.shift()\r\n    let bb = b.shift()\r\n\r\n    let alower = aa.toLowerCase()\r\n    let blower = bb.toLowerCase()\r\n\r\n    // Case insensitive comparison until characters match\r\n    if (alower > blower) {\r\n      return 1\r\n    }\r\n    if (blower > alower) {\r\n      return -1\r\n    }\r\n    // If lowercase characters are identical\r\n    if (aa > bb) {\r\n      return 1\r\n    }\r\n    if (bb > aa) {\r\n      return -1\r\n    }\r\n    continue\r\n  }\r\n\r\n  return a.length - b.length\r\n}\r\n\r\nexport function number(rowA, rowB, columnId) {\r\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\r\n\r\n  const replaceNonNumeric = /[^0-9.]/gi\r\n\r\n  a = Number(String(a).replace(replaceNonNumeric, ''))\r\n  b = Number(String(b).replace(replaceNonNumeric, ''))\r\n\r\n  return compareBasic(a, b)\r\n}\r\n\r\n// Utils\r\n\r\nfunction compareBasic(a, b) {\r\n  return a === b ? 0 : a > b ? 1 : -1\r\n}\r\n\r\nfunction getRowValuesByColumnID(row1, row2, columnId) {\r\n  return [row1.values[columnId], row2.values[columnId]]\r\n}\r\n\r\nfunction toString(a) {\r\n  if (typeof a === 'number') {\r\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\r\n      return ''\r\n    }\r\n    return String(a)\r\n  }\r\n  if (typeof a === 'string') {\r\n    return a\r\n  }\r\n  return ''\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  ensurePluginOrder,\r\n  defaultColumn,\r\n  makePropGetter,\r\n  useGetLatest,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nimport { getFirstDefined, isFunction } from '../utils'\r\n\r\nimport * as sortTypes from '../sortTypes'\r\n\r\n// Actions\r\nactions.resetSortBy = 'resetSortBy'\r\nactions.setSortBy = 'setSortBy'\r\nactions.toggleSortBy = 'toggleSortBy'\r\nactions.clearSortBy = 'clearSortBy'\r\n\r\ndefaultColumn.sortType = 'alphanumeric'\r\ndefaultColumn.sortDescFirst = false\r\n\r\nexport const useSortBy = hooks => {\r\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseSortBy.pluginName = 'useSortBy'\r\n\r\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\r\n  const { isMultiSortEvent = e => e.shiftKey } = instance\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onClick: column.canSort\r\n        ? e => {\r\n            e.persist()\r\n            column.toggleSortBy(\r\n              undefined,\r\n              !instance.disableMultiSort && isMultiSortEvent(e)\r\n            )\r\n          }\r\n        : undefined,\r\n      style: {\r\n        cursor: column.canSort ? 'pointer' : undefined,\r\n      },\r\n      title: column.canSort ? 'Toggle SortBy' : undefined,\r\n    },\r\n  ]\r\n}\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      sortBy: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetSortBy) {\r\n    return {\r\n      ...state,\r\n      sortBy: instance.initialState.sortBy || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.clearSortBy) {\r\n    const { sortBy } = state\r\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\r\n\r\n    return {\r\n      ...state,\r\n      sortBy: newSortBy,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setSortBy) {\r\n    const { sortBy } = action\r\n    return {\r\n      ...state,\r\n      sortBy,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleSortBy) {\r\n    const { columnId, desc, multi } = action\r\n\r\n    const {\r\n      allColumns,\r\n      disableMultiSort,\r\n      disableSortRemove,\r\n      disableMultiRemove,\r\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\r\n    } = instance\r\n\r\n    const { sortBy } = state\r\n\r\n    // Find the column for this columnId\r\n    const column = allColumns.find(d => d.id === columnId)\r\n    const { sortDescFirst } = column\r\n\r\n    // Find any existing sortBy for this column\r\n    const existingSortBy = sortBy.find(d => d.id === columnId)\r\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\r\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\r\n\r\n    let newSortBy = []\r\n\r\n    // What should we do with this sort action?\r\n    let sortAction\r\n\r\n    if (!disableMultiSort && multi) {\r\n      if (existingSortBy) {\r\n        sortAction = 'toggle'\r\n      } else {\r\n        sortAction = 'add'\r\n      }\r\n    } else {\r\n      // Normal mode\r\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\r\n        sortAction = 'replace'\r\n      } else if (existingSortBy) {\r\n        sortAction = 'toggle'\r\n      } else {\r\n        sortAction = 'replace'\r\n      }\r\n    }\r\n\r\n    // Handle toggle states that will remove the sortBy\r\n    if (\r\n      sortAction === 'toggle' && // Must be toggling\r\n      !disableSortRemove && // If disableSortRemove, disable in general\r\n      !hasDescDefined && // Must not be setting desc\r\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\r\n      ((existingSortBy && // Finally, detect if it should indeed be removed\r\n        existingSortBy.desc &&\r\n        !sortDescFirst) ||\r\n        (!existingSortBy.desc && sortDescFirst))\r\n    ) {\r\n      sortAction = 'remove'\r\n    }\r\n\r\n    if (sortAction === 'replace') {\r\n      newSortBy = [\r\n        {\r\n          id: columnId,\r\n          desc: hasDescDefined ? desc : sortDescFirst,\r\n        },\r\n      ]\r\n    } else if (sortAction === 'add') {\r\n      newSortBy = [\r\n        ...sortBy,\r\n        {\r\n          id: columnId,\r\n          desc: hasDescDefined ? desc : sortDescFirst,\r\n        },\r\n      ]\r\n      // Take latest n columns\r\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\r\n    } else if (sortAction === 'toggle') {\r\n      // This flips (or sets) the\r\n      newSortBy = sortBy.map(d => {\r\n        if (d.id === columnId) {\r\n          return {\r\n            ...d,\r\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\r\n          }\r\n        }\r\n        return d\r\n      })\r\n    } else if (sortAction === 'remove') {\r\n      newSortBy = sortBy.filter(d => d.id !== columnId)\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      sortBy: newSortBy,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    allColumns,\r\n    orderByFn = defaultOrderByFn,\r\n    sortTypes: userSortTypes,\r\n    manualSortBy,\r\n    defaultCanSort,\r\n    disableSortBy,\r\n    flatHeaders,\r\n    state: { sortBy },\r\n    dispatch,\r\n    plugins,\r\n    getHooks,\r\n    autoResetSortBy = true,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\r\n    'useSortBy'\r\n  )\r\n\r\n  const setSortBy = React.useCallback(\r\n    sortBy => {\r\n      dispatch({ type: actions.setSortBy, sortBy })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // Updates sorting based on a columnId, desc flag and multi flag\r\n  const toggleSortBy = React.useCallback(\r\n    (columnId, desc, multi) => {\r\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // use reference to avoid memory leak in #1608\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  // Add the getSortByToggleProps method to columns and headers\r\n  flatHeaders.forEach(column => {\r\n    const {\r\n      accessor,\r\n      canSort: defaultColumnCanSort,\r\n      disableSortBy: columnDisableSortBy,\r\n      id,\r\n    } = column\r\n\r\n    const canSort = accessor\r\n      ? getFirstDefined(\r\n          columnDisableSortBy === true ? false : undefined,\r\n          disableSortBy === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\r\n\r\n    column.canSort = canSort\r\n\r\n    if (column.canSort) {\r\n      column.toggleSortBy = (desc, multi) =>\r\n        toggleSortBy(column.id, desc, multi)\r\n\r\n      column.clearSortBy = () => {\r\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\r\n      }\r\n    }\r\n\r\n    column.getSortByToggleProps = makePropGetter(\r\n      getHooks().getSortByToggleProps,\r\n      {\r\n        instance: getInstance(),\r\n        column,\r\n      }\r\n    )\r\n\r\n    const columnSort = sortBy.find(d => d.id === id)\r\n    column.isSorted = !!columnSort\r\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\r\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\r\n  })\r\n\r\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\r\n    if (manualSortBy || !sortBy.length) {\r\n      return [rows, flatRows]\r\n    }\r\n\r\n    const sortedFlatRows = []\r\n\r\n    // Filter out sortBys that correspond to non existing columns\r\n    const availableSortBy = sortBy.filter(sort =>\r\n      allColumns.find(col => col.id === sort.id)\r\n    )\r\n\r\n    const sortData = rows => {\r\n      // Use the orderByFn to compose multiple sortBy's together.\r\n      // This will also perform a stable sorting using the row index\r\n      // if needed.\r\n      const sortedData = orderByFn(\r\n        rows,\r\n        availableSortBy.map(sort => {\r\n          // Support custom sorting methods for each column\r\n          const column = allColumns.find(d => d.id === sort.id)\r\n\r\n          if (!column) {\r\n            throw new Error(\r\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\r\n            )\r\n          }\r\n\r\n          const { sortType } = column\r\n\r\n          // Look up sortBy functions in this order:\r\n          // column function\r\n          // column string lookup on user sortType\r\n          // column string lookup on built-in sortType\r\n          // default function\r\n          // default string lookup on user sortType\r\n          // default string lookup on built-in sortType\r\n          const sortMethod =\r\n            isFunction(sortType) ||\r\n            (userSortTypes || {})[sortType] ||\r\n            sortTypes[sortType]\r\n\r\n          if (!sortMethod) {\r\n            throw new Error(\r\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\r\n            )\r\n          }\r\n\r\n          // Return the correct sortFn.\r\n          // This function should always return in ascending order\r\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\r\n        }),\r\n        // Map the directions\r\n        availableSortBy.map(sort => {\r\n          // Detect and use the sortInverted option\r\n          const column = allColumns.find(d => d.id === sort.id)\r\n\r\n          if (column && column.sortInverted) {\r\n            return sort.desc\r\n          }\r\n\r\n          return !sort.desc\r\n        })\r\n      )\r\n\r\n      // If there are sub-rows, sort them\r\n      sortedData.forEach(row => {\r\n        sortedFlatRows.push(row)\r\n        if (!row.subRows || row.subRows.length === 0) {\r\n          return\r\n        }\r\n        row.subRows = sortData(row.subRows)\r\n      })\r\n\r\n      return sortedData\r\n    }\r\n\r\n    return [sortData(rows), sortedFlatRows]\r\n  }, [\r\n    manualSortBy,\r\n    sortBy,\r\n    rows,\r\n    flatRows,\r\n    allColumns,\r\n    orderByFn,\r\n    userSortTypes,\r\n  ])\r\n\r\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetSortBy()) {\r\n      dispatch({ type: actions.resetSortBy })\r\n    }\r\n  }, [manualSortBy ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preSortedRows: rows,\r\n    preSortedFlatRows: flatRows,\r\n    sortedRows,\r\n    sortedFlatRows,\r\n    rows: sortedRows,\r\n    flatRows: sortedFlatRows,\r\n    setSortBy,\r\n    toggleSortBy,\r\n  })\r\n}\r\n\r\nexport function defaultOrderByFn(arr, funcs, dirs) {\r\n  return [...arr].sort((rowA, rowB) => {\r\n    for (let i = 0; i < funcs.length; i += 1) {\r\n      const sortFn = funcs[i]\r\n      const desc = dirs[i] === false || dirs[i] === 'desc'\r\n      const sortInt = sortFn(rowA, rowB)\r\n      if (sortInt !== 0) {\r\n        return desc ? -sortInt : sortInt\r\n      }\r\n    }\r\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\n//\r\n\r\nimport {\r\n  actions,\r\n  ensurePluginOrder,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport { expandRows } from '../utils'\r\n\r\nconst pluginName = 'usePagination'\r\n\r\n// Actions\r\nactions.resetPage = 'resetPage'\r\nactions.gotoPage = 'gotoPage'\r\nactions.setPageSize = 'setPageSize'\r\n\r\nexport const usePagination = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nusePagination.pluginName = pluginName\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      pageSize: 10,\r\n      pageIndex: 0,\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetPage) {\r\n    return {\r\n      ...state,\r\n      pageIndex: instance.initialState.pageIndex || 0,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.gotoPage) {\r\n    const { pageCount, page } = instance\r\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\r\n    let canNavigate = false\r\n\r\n    if (newPageIndex > state.pageIndex) {\r\n      // next page\r\n      canNavigate =\r\n        pageCount === -1\r\n          ? page.length >= state.pageSize\r\n          : newPageIndex < pageCount\r\n    } else if (newPageIndex < state.pageIndex) {\r\n      // prev page\r\n      canNavigate = newPageIndex > -1\r\n    }\r\n\r\n    if (!canNavigate) {\r\n      return state\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      pageIndex: newPageIndex,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setPageSize) {\r\n    const { pageSize } = action\r\n    const topRowIndex = state.pageSize * state.pageIndex\r\n    const pageIndex = Math.floor(topRowIndex / pageSize)\r\n\r\n    return {\r\n      ...state,\r\n      pageIndex,\r\n      pageSize,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    rows,\r\n    autoResetPage = true,\r\n    manualExpandedKey = 'expanded',\r\n    plugins,\r\n    pageCount: userPageCount,\r\n    paginateExpandedRows = true,\r\n    expandSubRows = true,\r\n    state: {\r\n      pageSize,\r\n      pageIndex,\r\n      expanded,\r\n      globalFilter,\r\n      filters,\r\n      groupBy,\r\n      sortBy,\r\n    },\r\n    dispatch,\r\n    data,\r\n    manualPagination,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\r\n    'usePagination'\r\n  )\r\n\r\n  const getAutoResetPage = useGetLatest(autoResetPage)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetPage()) {\r\n      dispatch({ type: actions.resetPage })\r\n    }\r\n  }, [\r\n    dispatch,\r\n    manualPagination ? null : data,\r\n    globalFilter,\r\n    filters,\r\n    groupBy,\r\n    sortBy,\r\n  ])\r\n\r\n  const pageCount = manualPagination\r\n    ? userPageCount\r\n    : Math.ceil(rows.length / pageSize)\r\n\r\n  const pageOptions = React.useMemo(\r\n    () =>\r\n      pageCount > 0\r\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\r\n        : [],\r\n    [pageCount]\r\n  )\r\n\r\n  const page = React.useMemo(() => {\r\n    let page\r\n\r\n    if (manualPagination) {\r\n      page = rows\r\n    } else {\r\n      const pageStart = pageSize * pageIndex\r\n      const pageEnd = pageStart + pageSize\r\n\r\n      page = rows.slice(pageStart, pageEnd)\r\n    }\r\n\r\n    if (paginateExpandedRows) {\r\n      return page\r\n    }\r\n\r\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\r\n  }, [\r\n    expandSubRows,\r\n    expanded,\r\n    manualExpandedKey,\r\n    manualPagination,\r\n    pageIndex,\r\n    pageSize,\r\n    paginateExpandedRows,\r\n    rows,\r\n  ])\r\n\r\n  const canPreviousPage = pageIndex > 0\r\n  const canNextPage =\r\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\r\n\r\n  const gotoPage = React.useCallback(\r\n    pageIndex => {\r\n      dispatch({ type: actions.gotoPage, pageIndex })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const previousPage = React.useCallback(() => {\r\n    return gotoPage(old => old - 1)\r\n  }, [gotoPage])\r\n\r\n  const nextPage = React.useCallback(() => {\r\n    return gotoPage(old => old + 1)\r\n  }, [gotoPage])\r\n\r\n  const setPageSize = React.useCallback(\r\n    pageSize => {\r\n      dispatch({ type: actions.setPageSize, pageSize })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    pageOptions,\r\n    pageCount,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    gotoPage,\r\n    previousPage,\r\n    nextPage,\r\n    setPageSize,\r\n  })\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport { flattenColumns, getFirstDefined } from '../utils'\r\n\r\n// Actions\r\nactions.resetPivot = 'resetPivot'\r\nactions.togglePivot = 'togglePivot'\r\n\r\nexport const _UNSTABLE_usePivotColumns = hooks => {\r\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\r\n  hooks.allColumns.push(allColumns)\r\n  hooks.accessValue.push(accessValue)\r\n  hooks.materializedColumns.push(materializedColumns)\r\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\r\n\r\nconst defaultPivotColumns = []\r\n\r\nconst defaultGetPivotToggleProps = (props, { header }) => [\r\n  props,\r\n  {\r\n    onClick: header.canPivot\r\n      ? e => {\r\n          e.persist()\r\n          header.togglePivot()\r\n        }\r\n      : undefined,\r\n    style: {\r\n      cursor: header.canPivot ? 'pointer' : undefined,\r\n    },\r\n    title: 'Toggle Pivot',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      pivotColumns: defaultPivotColumns,\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetPivot) {\r\n    return {\r\n      ...state,\r\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.togglePivot) {\r\n    const { columnId, value: setPivot } = action\r\n\r\n    const resolvedPivot =\r\n      typeof setPivot !== 'undefined'\r\n        ? setPivot\r\n        : !state.pivotColumns.includes(columnId)\r\n\r\n    if (resolvedPivot) {\r\n      return {\r\n        ...state,\r\n        pivotColumns: [...state.pivotColumns, columnId],\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstanceAfterData(instance) {\r\n  instance.allColumns.forEach(column => {\r\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\r\n  })\r\n}\r\n\r\nfunction allColumns(columns, { instance }) {\r\n  columns.forEach(column => {\r\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\r\n    column.uniqueValues = new Set()\r\n  })\r\n  return columns\r\n}\r\n\r\nfunction accessValue(value, { column }) {\r\n  if (column.uniqueValues && typeof value !== 'undefined') {\r\n    column.uniqueValues.add(value)\r\n  }\r\n  return value\r\n}\r\n\r\nfunction materializedColumns(materialized, { instance }) {\r\n  const { allColumns, state } = instance\r\n\r\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\r\n    return materialized\r\n  }\r\n\r\n  const pivotColumns = state.pivotColumns\r\n    .map(id => allColumns.find(d => d.id === id))\r\n    .filter(Boolean)\r\n\r\n  const sourceColumns = allColumns.filter(\r\n    d =>\r\n      !d.isPivotSource &&\r\n      !state.groupBy.includes(d.id) &&\r\n      !state.pivotColumns.includes(d.id)\r\n  )\r\n\r\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\r\n    const pivotColumn = pivotColumns[depth]\r\n\r\n    if (!pivotColumn) {\r\n      return sourceColumns.map(sourceColumn => {\r\n        // TODO: We could offer support here for renesting pivoted\r\n        // columns inside copies of their header groups. For now,\r\n        // that seems like it would be (1) overkill on nesting, considering\r\n        // you already get nesting for every pivot level and (2)\r\n        // really hard. :)\r\n\r\n        return {\r\n          ...sourceColumn,\r\n          canPivot: false,\r\n          isPivoted: true,\r\n          parent,\r\n          depth: depth,\r\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\r\n          accessor: (originalRow, i, row) => {\r\n            if (pivotFilters.every(filter => filter(row))) {\r\n              return row.values[sourceColumn.id]\r\n            }\r\n          },\r\n        }\r\n      })\r\n    }\r\n\r\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\r\n\r\n    return uniqueValues.map(uniqueValue => {\r\n      const columnGroup = {\r\n        ...pivotColumn,\r\n        Header:\r\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\r\n            ? `${pivotColumn.Header}: ${uniqueValue}`\r\n            : uniqueValue,\r\n        isPivotGroup: true,\r\n        parent,\r\n        depth,\r\n        id: parent\r\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\r\n          : `${pivotColumn.id}.${uniqueValue}`,\r\n        pivotValue: uniqueValue,\r\n      }\r\n\r\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\r\n        ...pivotFilters,\r\n        row => row.values[pivotColumn.id] === uniqueValue,\r\n      ])\r\n\r\n      return columnGroup\r\n    })\r\n  }\r\n\r\n  const newMaterialized = flattenColumns(buildPivotColumns())\r\n\r\n  return [...materialized, ...newMaterialized]\r\n}\r\n\r\nfunction materializedColumnsDeps(\r\n  deps,\r\n  {\r\n    instance: {\r\n      state: { pivotColumns, groupBy },\r\n    },\r\n  }\r\n) {\r\n  return [...deps, pivotColumns, groupBy]\r\n}\r\n\r\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\r\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\r\n\r\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\r\n    visibleColumns = visibleColumns.filter(\r\n      column => column.isGrouped || column.isPivoted\r\n    )\r\n  }\r\n\r\n  return visibleColumns\r\n}\r\n\r\nfunction visibleColumnsDeps(deps, { instance }) {\r\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    columns,\r\n    allColumns,\r\n    flatHeaders,\r\n    // pivotFn = defaultPivotFn,\r\n    // manualPivot,\r\n    getHooks,\r\n    plugins,\r\n    dispatch,\r\n    autoResetPivot = true,\r\n    manaulPivot,\r\n    disablePivot,\r\n    defaultCanPivot,\r\n  } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      accessor,\r\n      defaultPivot: defaultColumnPivot,\r\n      disablePivot: columnDisablePivot,\r\n    } = column\r\n\r\n    column.canPivot = accessor\r\n      ? getFirstDefined(\r\n          column.canPivot,\r\n          columnDisablePivot === true ? false : undefined,\r\n          disablePivot === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(\r\n          column.canPivot,\r\n          defaultColumnPivot,\r\n          defaultCanPivot,\r\n          false\r\n        )\r\n\r\n    if (column.canPivot) {\r\n      column.togglePivot = () => instance.togglePivot(column.id)\r\n    }\r\n\r\n    column.Aggregated = column.Aggregated || column.Cell\r\n  })\r\n\r\n  const togglePivot = (columnId, value) => {\r\n    dispatch({ type: actions.togglePivot, columnId, value })\r\n  }\r\n\r\n  flatHeaders.forEach(header => {\r\n    header.getPivotToggleProps = makePropGetter(\r\n      getHooks().getPivotToggleProps,\r\n      {\r\n        instance: getInstance(),\r\n        header,\r\n      }\r\n    )\r\n  })\r\n\r\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetPivot()) {\r\n      dispatch({ type: actions.resetPivot })\r\n    }\r\n  }, [dispatch, manaulPivot ? null : columns])\r\n\r\n  Object.assign(instance, {\r\n    togglePivot,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row) {\r\n  row.allCells.forEach(cell => {\r\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\r\n    cell.isPivoted = cell.column.isPivoted\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useGetLatest,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nconst pluginName = 'useRowSelect'\r\n\r\n// Actions\r\nactions.resetSelectedRows = 'resetSelectedRows'\r\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\r\nactions.toggleRowSelected = 'toggleRowSelected'\r\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\r\n\r\nexport const useRowSelect = hooks => {\r\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\r\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\r\n  hooks.getToggleAllPageRowsSelectedProps = [\r\n    defaultGetToggleAllPageRowsSelectedProps,\r\n  ]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseRowSelect.pluginName = pluginName\r\n\r\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\r\n  const { manualRowSelectedKey = 'isSelected' } = instance\r\n  let checked = false\r\n\r\n  if (row.original && row.original[manualRowSelectedKey]) {\r\n    checked = true\r\n  } else {\r\n    checked = row.isSelected\r\n  }\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onChange: e => {\r\n        row.toggleRowSelected(e.target.checked)\r\n      },\r\n      style: {\r\n        cursor: 'pointer',\r\n      },\r\n      checked,\r\n      title: 'Toggle Row Selected',\r\n      indeterminate: row.isSomeSelected,\r\n    },\r\n  ]\r\n}\r\n\r\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      instance.toggleAllRowsSelected(e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: instance.isAllRowsSelected,\r\n    title: 'Toggle All Rows Selected',\r\n    indeterminate: Boolean(\r\n      !instance.isAllRowsSelected &&\r\n        Object.keys(instance.state.selectedRowIds).length\r\n    ),\r\n  },\r\n]\r\n\r\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange(e) {\r\n      instance.toggleAllPageRowsSelected(e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: instance.isAllPageRowsSelected,\r\n    title: 'Toggle All Current Page Rows Selected',\r\n    indeterminate: Boolean(\r\n      !instance.isAllPageRowsSelected &&\r\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\r\n    ),\r\n  },\r\n]\r\n\r\n// eslint-disable-next-line max-params\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      selectedRowIds: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetSelectedRows) {\r\n    return {\r\n      ...state,\r\n      selectedRowIds: instance.initialState.selectedRowIds || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllRowsSelected) {\r\n    const { value: setSelected } = action\r\n    const {\r\n      isAllRowsSelected,\r\n      rowsById,\r\n      nonGroupedRowsById = rowsById,\r\n    } = instance\r\n\r\n    const selectAll =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\r\n\r\n    // Only remove/add the rows that are visible on the screen\r\n    //  Leave all the other rows that are selected alone.\r\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\r\n\r\n    if (selectAll) {\r\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\r\n        selectedRowIds[rowId] = true\r\n      })\r\n    } else {\r\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\r\n        delete selectedRowIds[rowId]\r\n      })\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleRowSelected) {\r\n    const { id, value: setSelected } = action\r\n    const { rowsById, selectSubRows = true, getSubRows } = instance\r\n    const isSelected = state.selectedRowIds[id]\r\n    const shouldExist =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\r\n\r\n    if (isSelected === shouldExist) {\r\n      return state\r\n    }\r\n\r\n    const newSelectedRowIds = { ...state.selectedRowIds }\r\n\r\n    const handleRowById = id => {\r\n      const row = rowsById[id]\r\n\r\n      if (!row.isGrouped) {\r\n        if (shouldExist) {\r\n          newSelectedRowIds[id] = true\r\n        } else {\r\n          delete newSelectedRowIds[id]\r\n        }\r\n      }\r\n\r\n      if (selectSubRows && getSubRows(row)) {\r\n        return getSubRows(row).forEach(row => handleRowById(row.id))\r\n      }\r\n    }\r\n\r\n    handleRowById(id)\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds: newSelectedRowIds,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllPageRowsSelected) {\r\n    const { value: setSelected } = action\r\n    const {\r\n      page,\r\n      rowsById,\r\n      selectSubRows = true,\r\n      isAllPageRowsSelected,\r\n      getSubRows,\r\n    } = instance\r\n\r\n    const selectAll =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\r\n\r\n    const newSelectedRowIds = { ...state.selectedRowIds }\r\n\r\n    const handleRowById = id => {\r\n      const row = rowsById[id]\r\n\r\n      if (!row.isGrouped) {\r\n        if (selectAll) {\r\n          newSelectedRowIds[id] = true\r\n        } else {\r\n          delete newSelectedRowIds[id]\r\n        }\r\n      }\r\n\r\n      if (selectSubRows && getSubRows(row)) {\r\n        return getSubRows(row).forEach(row => handleRowById(row.id))\r\n      }\r\n    }\r\n\r\n    page.forEach(row => handleRowById(row.id))\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds: newSelectedRowIds,\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    getHooks,\r\n    plugins,\r\n    rowsById,\r\n    nonGroupedRowsById = rowsById,\r\n    autoResetSelectedRows = true,\r\n    state: { selectedRowIds },\r\n    selectSubRows = true,\r\n    dispatch,\r\n    page,\r\n    getSubRows,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\r\n    'useRowSelect'\r\n  )\r\n\r\n  const selectedFlatRows = React.useMemo(() => {\r\n    const selectedFlatRows = []\r\n\r\n    rows.forEach(row => {\r\n      const isSelected = selectSubRows\r\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\r\n        : !!selectedRowIds[row.id]\r\n      row.isSelected = !!isSelected\r\n      row.isSomeSelected = isSelected === null\r\n\r\n      if (isSelected) {\r\n        selectedFlatRows.push(row)\r\n      }\r\n    })\r\n\r\n    return selectedFlatRows\r\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\r\n\r\n  let isAllRowsSelected = Boolean(\r\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\r\n  )\r\n\r\n  let isAllPageRowsSelected = isAllRowsSelected\r\n\r\n  if (isAllRowsSelected) {\r\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\r\n      isAllRowsSelected = false\r\n    }\r\n  }\r\n\r\n  if (!isAllRowsSelected) {\r\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\r\n      isAllPageRowsSelected = false\r\n    }\r\n  }\r\n\r\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetSelectedRows()) {\r\n      dispatch({ type: actions.resetSelectedRows })\r\n    }\r\n  }, [dispatch, data])\r\n\r\n  const toggleAllRowsSelected = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleAllPageRowsSelected = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleRowSelected = React.useCallback(\r\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const getToggleAllRowsSelectedProps = makePropGetter(\r\n    getHooks().getToggleAllRowsSelectedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\r\n    getHooks().getToggleAllPageRowsSelectedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    selectedFlatRows,\r\n    isAllRowsSelected,\r\n    isAllPageRowsSelected,\r\n    toggleRowSelected,\r\n    toggleAllRowsSelected,\r\n    getToggleAllRowsSelectedProps,\r\n    getToggleAllPageRowsSelectedProps,\r\n    toggleAllPageRowsSelected,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance }) {\r\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\r\n\r\n  row.getToggleRowSelectedProps = makePropGetter(\r\n    instance.getHooks().getToggleRowSelectedProps,\r\n    { instance: instance, row }\r\n  )\r\n}\r\n\r\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\r\n  if (selectedRowIds[row.id]) {\r\n    return true\r\n  }\r\n\r\n  const subRows = getSubRows(row)\r\n\r\n  if (subRows && subRows.length) {\r\n    let allChildrenSelected = true\r\n    let someSelected = false\r\n\r\n    subRows.forEach(subRow => {\r\n      // Bail out early if we know both of these\r\n      if (someSelected && !allChildrenSelected) {\r\n        return\r\n      }\r\n\r\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\r\n        someSelected = true\r\n      } else {\r\n        allChildrenSelected = false\r\n      }\r\n    })\r\n    return allChildrenSelected ? true : someSelected ? null : false\r\n  }\r\n\r\n  return false\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nconst defaultInitialRowStateAccessor = row => ({})\r\nconst defaultInitialCellStateAccessor = cell => ({})\r\n\r\n// Actions\r\nactions.setRowState = 'setRowState'\r\nactions.setCellState = 'setCellState'\r\nactions.resetRowState = 'resetRowState'\r\n\r\nexport const useRowState = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseRowState.pluginName = 'useRowState'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  const {\r\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\r\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\r\n    rowsById,\r\n  } = instance\r\n\r\n  if (action.type === actions.init) {\r\n    return {\r\n      rowState: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetRowState) {\r\n    return {\r\n      ...state,\r\n      rowState: instance.initialState.rowState || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setRowState) {\r\n    const { rowId, value } = action\r\n\r\n    const oldRowState =\r\n      typeof state.rowState[rowId] !== 'undefined'\r\n        ? state.rowState[rowId]\r\n        : initialRowStateAccessor(rowsById[rowId])\r\n\r\n    return {\r\n      ...state,\r\n      rowState: {\r\n        ...state.rowState,\r\n        [rowId]: functionalUpdate(value, oldRowState),\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setCellState) {\r\n    const { rowId, columnId, value } = action\r\n\r\n    const oldRowState =\r\n      typeof state.rowState[rowId] !== 'undefined'\r\n        ? state.rowState[rowId]\r\n        : initialRowStateAccessor(rowsById[rowId])\r\n\r\n    const oldCellState =\r\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\r\n        ? oldRowState.cellState[columnId]\r\n        : initialCellStateAccessor(\r\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\r\n          )\r\n\r\n    return {\r\n      ...state,\r\n      rowState: {\r\n        ...state.rowState,\r\n        [rowId]: {\r\n          ...oldRowState,\r\n          cellState: {\r\n            ...(oldRowState.cellState || {}),\r\n            [columnId]: functionalUpdate(value, oldCellState),\r\n          },\r\n        },\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { autoResetRowState = true, data, dispatch } = instance\r\n\r\n  const setRowState = React.useCallback(\r\n    (rowId, value) =>\r\n      dispatch({\r\n        type: actions.setRowState,\r\n        rowId,\r\n        value,\r\n      }),\r\n    [dispatch]\r\n  )\r\n\r\n  const setCellState = React.useCallback(\r\n    (rowId, columnId, value) =>\r\n      dispatch({\r\n        type: actions.setCellState,\r\n        rowId,\r\n        columnId,\r\n        value,\r\n      }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetRowState()) {\r\n      dispatch({ type: actions.resetRowState })\r\n    }\r\n  }, [data])\r\n\r\n  Object.assign(instance, {\r\n    setRowState,\r\n    setCellState,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance }) {\r\n  const {\r\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\r\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\r\n    state: { rowState },\r\n  } = instance\r\n\r\n  if (row) {\r\n    row.state =\r\n      typeof rowState[row.id] !== 'undefined'\r\n        ? rowState[row.id]\r\n        : initialRowStateAccessor(row)\r\n\r\n    row.setState = updater => {\r\n      return instance.setRowState(row.id, updater)\r\n    }\r\n\r\n    row.cells.forEach(cell => {\r\n      if (!row.state.cellState) {\r\n        row.state.cellState = {}\r\n      }\r\n\r\n      cell.state =\r\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\r\n          ? row.state.cellState[cell.column.id]\r\n          : initialCellStateAccessor(cell)\r\n\r\n      cell.setState = updater => {\r\n        return instance.setCellState(row.id, cell.column.id, updater)\r\n      }\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport { functionalUpdate, actions } from '../publicUtils'\r\n\r\n// Actions\r\nactions.resetColumnOrder = 'resetColumnOrder'\r\nactions.setColumnOrder = 'setColumnOrder'\r\n\r\nexport const useColumnOrder = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\r\n    return [...deps, instance.state.columnOrder]\r\n  })\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseColumnOrder.pluginName = 'useColumnOrder'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      columnOrder: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetColumnOrder) {\r\n    return {\r\n      ...state,\r\n      columnOrder: instance.initialState.columnOrder || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setColumnOrder) {\r\n    return {\r\n      ...state,\r\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\r\n    }\r\n  }\r\n}\r\n\r\nfunction visibleColumns(\r\n  columns,\r\n  {\r\n    instance: {\r\n      state: { columnOrder },\r\n    },\r\n  }\r\n) {\r\n  // If there is no order, return the normal columns\r\n  if (!columnOrder || !columnOrder.length) {\r\n    return columns\r\n  }\r\n\r\n  const columnOrderCopy = [...columnOrder]\r\n\r\n  // If there is an order, make a copy of the columns\r\n  const columnsCopy = [...columns]\r\n\r\n  // And make a new ordered array of the columns\r\n  const columnsInOrder = []\r\n\r\n  // Loop over the columns and place them in order into the new array\r\n  while (columnsCopy.length && columnOrderCopy.length) {\r\n    const targetColumnId = columnOrderCopy.shift()\r\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\r\n    if (foundIndex > -1) {\r\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\r\n    }\r\n  }\r\n\r\n  // If there are any columns left, add them to the end\r\n  return [...columnsInOrder, ...columnsCopy]\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { dispatch } = instance\r\n\r\n  instance.setColumnOrder = React.useCallback(\r\n    columnOrder => {\r\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  defaultColumn,\r\n  makePropGetter,\r\n  useGetLatest,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nimport { getFirstDefined, passiveEventSupported } from '../utils'\r\n\r\n// Default Column\r\ndefaultColumn.canResize = true\r\n\r\n// Actions\r\nactions.columnStartResizing = 'columnStartResizing'\r\nactions.columnResizing = 'columnResizing'\r\nactions.columnDoneResizing = 'columnDoneResizing'\r\nactions.resetResize = 'resetResize'\r\n\r\nexport const useResizeColumns = hooks => {\r\n  hooks.getResizerProps = [defaultGetResizerProps]\r\n  hooks.getHeaderProps.push({\r\n    style: {\r\n      position: 'relative',\r\n    },\r\n  })\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\r\n}\r\n\r\nconst defaultGetResizerProps = (props, { instance, header }) => {\r\n  const { dispatch } = instance\r\n\r\n  const onResizeStart = (e, header) => {\r\n    let isTouchEvent = false\r\n    if (e.type === 'touchstart') {\r\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\r\n      if (e.touches && e.touches.length > 1) {\r\n        return\r\n      }\r\n      isTouchEvent = true\r\n    }\r\n    const headersToResize = getLeafHeaders(header)\r\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\r\n\r\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\r\n\r\n    const dispatchMove = clientXPos => {\r\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\r\n    }\r\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\r\n\r\n    const handlersAndEvents = {\r\n      mouse: {\r\n        moveEvent: 'mousemove',\r\n        moveHandler: e => dispatchMove(e.clientX),\r\n        upEvent: 'mouseup',\r\n        upHandler: e => {\r\n          document.removeEventListener(\r\n            'mousemove',\r\n            handlersAndEvents.mouse.moveHandler\r\n          )\r\n          document.removeEventListener(\r\n            'mouseup',\r\n            handlersAndEvents.mouse.upHandler\r\n          )\r\n          dispatchEnd()\r\n        },\r\n      },\r\n      touch: {\r\n        moveEvent: 'touchmove',\r\n        moveHandler: e => {\r\n          if (e.cancelable) {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n          }\r\n          dispatchMove(e.touches[0].clientX)\r\n          return false\r\n        },\r\n        upEvent: 'touchend',\r\n        upHandler: e => {\r\n          document.removeEventListener(\r\n            handlersAndEvents.touch.moveEvent,\r\n            handlersAndEvents.touch.moveHandler\r\n          )\r\n          document.removeEventListener(\r\n            handlersAndEvents.touch.upEvent,\r\n            handlersAndEvents.touch.moveHandler\r\n          )\r\n          dispatchEnd()\r\n        },\r\n      },\r\n    }\r\n\r\n    const events = isTouchEvent\r\n      ? handlersAndEvents.touch\r\n      : handlersAndEvents.mouse\r\n    const passiveIfSupported = passiveEventSupported()\r\n      ? { passive: false }\r\n      : false\r\n    document.addEventListener(\r\n      events.moveEvent,\r\n      events.moveHandler,\r\n      passiveIfSupported\r\n    )\r\n    document.addEventListener(\r\n      events.upEvent,\r\n      events.upHandler,\r\n      passiveIfSupported\r\n    )\r\n\r\n    dispatch({\r\n      type: actions.columnStartResizing,\r\n      columnId: header.id,\r\n      columnWidth: header.totalWidth,\r\n      headerIdWidths,\r\n      clientX,\r\n    })\r\n  }\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\r\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\r\n      style: {\r\n        cursor: 'col-resize',\r\n      },\r\n      draggable: false,\r\n      role: 'separator',\r\n    },\r\n  ]\r\n}\r\n\r\nuseResizeColumns.pluginName = 'useResizeColumns'\r\n\r\nfunction reducer(state, action) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      columnResizing: {\r\n        columnWidths: {},\r\n      },\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetResize) {\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        columnWidths: {},\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnStartResizing) {\r\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\r\n\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        startX: clientX,\r\n        headerIdWidths,\r\n        columnWidth,\r\n        isResizingColumn: columnId,\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnResizing) {\r\n    const { clientX } = action\r\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\r\n\r\n    const deltaX = clientX - startX\r\n    const percentageDeltaX = deltaX / columnWidth\r\n\r\n    const newColumnWidths = {}\r\n\r\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\r\n      newColumnWidths[headerId] = Math.max(\r\n        headerWidth + headerWidth * percentageDeltaX,\r\n        0\r\n      )\r\n    })\r\n\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        columnWidths: {\r\n          ...state.columnResizing.columnWidths,\r\n          ...newColumnWidths,\r\n        },\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnDoneResizing) {\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        startX: null,\r\n        isResizingColumn: null,\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nconst useInstanceBeforeDimensions = instance => {\r\n  const {\r\n    flatHeaders,\r\n    disableResizing,\r\n    getHooks,\r\n    state: { columnResizing },\r\n  } = instance\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  flatHeaders.forEach(header => {\r\n    const canResize = getFirstDefined(\r\n      header.disableResizing === true ? false : undefined,\r\n      disableResizing === true ? false : undefined,\r\n      true\r\n    )\r\n\r\n    header.canResize = canResize\r\n    header.width =\r\n      columnResizing.columnWidths[header.id] ||\r\n      header.originalWidth ||\r\n      header.width\r\n    header.isResizing = columnResizing.isResizingColumn === header.id\r\n\r\n    if (canResize) {\r\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\r\n        instance: getInstance(),\r\n        header,\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\r\n\r\n  const getAutoResetResize = useGetLatest(autoResetResize)\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetResize()) {\r\n      dispatch({ type: actions.resetResize })\r\n    }\r\n  }, [columns])\r\n\r\n  const resetResizing = React.useCallback(\r\n    () => dispatch({ type: actions.resetResize }),\r\n    [dispatch]\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    resetResizing,\r\n  })\r\n}\r\n\r\nfunction getLeafHeaders(header) {\r\n  const leafHeaders = []\r\n  const recurseHeader = header => {\r\n    if (header.columns && header.columns.length) {\r\n      header.columns.map(recurseHeader)\r\n    }\r\n    leafHeaders.push(header)\r\n  }\r\n  recurseHeader(header)\r\n  return leafHeaders\r\n}\r\n","const cellStyles = {\r\n  position: 'absolute',\r\n  top: 0,\r\n}\r\n\r\nexport const useAbsoluteLayout = hooks => {\r\n  hooks.getTableBodyProps.push(getRowStyles)\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n  hooks.getFooterGroupProps.push(getRowStyles)\r\n\r\n  hooks.getHeaderProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${column.totalLeft}px`,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getCellProps.push((props, { cell }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${cell.column.totalLeft}px`,\r\n        width: `${cell.column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getFooterProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${column.totalLeft}px`,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n}\r\n\r\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      position: 'relative',\r\n      width: `${instance.totalColumnsWidth}px`,\r\n    },\r\n  },\r\n]\r\n","const cellStyles = {\r\n  display: 'inline-block',\r\n  boxSizing: 'border-box',\r\n}\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: 'flex',\r\n      width: `${instance.totalColumnsWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nexport const useBlockLayout = hooks => {\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n  hooks.getFooterGroupProps.push(getRowStyles)\r\n\r\n  hooks.getHeaderProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getCellProps.push((props, { cell }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${cell.column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getFooterProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n}\r\n\r\nuseBlockLayout.pluginName = 'useBlockLayout'\r\n","export function useFlexLayout(hooks) {\r\n  hooks.getTableProps.push(getTableProps)\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n  hooks.getFooterGroupProps.push(getRowStyles)\r\n  hooks.getHeaderProps.push(getHeaderProps)\r\n  hooks.getCellProps.push(getCellProps)\r\n  hooks.getFooterProps.push(getFooterProps)\r\n}\r\n\r\nuseFlexLayout.pluginName = 'useFlexLayout'\r\n\r\nconst getTableProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      minWidth: `${instance.totalColumnsMinWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: 'flex',\r\n      flex: '1 0 auto',\r\n      minWidth: `${instance.totalColumnsMinWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getHeaderProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: column.totalFlexWidth\r\n        ? `${column.totalFlexWidth} 0 auto`\r\n        : undefined,\r\n      minWidth: `${column.totalMinWidth}px`,\r\n      width: `${column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getCellProps = (props, { cell }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\r\n      minWidth: `${cell.column.totalMinWidth}px`,\r\n      width: `${cell.column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getFooterProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: column.totalFlexWidth\r\n        ? `${column.totalFlexWidth} 0 auto`\r\n        : undefined,\r\n      minWidth: `${column.totalMinWidth}px`,\r\n      width: `${column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n","export function useGridLayout(hooks) {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.getTableProps.push(getTableProps)\r\n  hooks.getHeaderProps.push(getHeaderProps)\r\n}\r\n\r\nuseGridLayout.pluginName = 'useGridLayout'\r\n\r\nconst getTableProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: `grid`,\r\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `),\r\n    },\r\n  },\r\n]\r\n\r\nconst getHeaderProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    id: `header-cell-${column.id}`,\r\n    style: {\r\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\r\n    },\r\n  },\r\n]\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === `init`) {\r\n    return {\r\n      gridLayout: {\r\n        columnWidths: instance.columns.map(() => `auto`),\r\n      },\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === `columnStartResizing`) {\r\n    const { columnId } = action\r\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId)\r\n    const elWidth = getElementWidth(columnId)\r\n\r\n    if (elWidth !== undefined) {\r\n      return {\r\n        ...state,\r\n        gridLayout: {\r\n          ...state.gridLayout,\r\n          columnId,\r\n          columnIndex,\r\n          startingWidth: elWidth\r\n        },\r\n      }\r\n    } else {\r\n      return state\r\n    }\r\n  }\r\n\r\n  if (action.type === `columnResizing`) {\r\n    const {\r\n      columnIndex,\r\n      startingWidth,\r\n      columnWidths,\r\n    } = state.gridLayout\r\n\r\n    const change = state.columnResizing.startX - action.clientX\r\n    const newWidth = startingWidth - change\r\n    const columnWidthsCopy = [...columnWidths]\r\n    columnWidthsCopy[columnIndex] = `${newWidth}px`\r\n\r\n    return {\r\n      ...state,\r\n      gridLayout: {\r\n        ...state.gridLayout,\r\n        columnWidths: columnWidthsCopy,\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nfunction getElementWidth(columnId) {\r\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\r\n\r\n  if (width !== undefined) {\r\n    return width\r\n  }\r\n}"],"names":["actions","init","defaultRenderer","value","emptyRenderer","React","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","reduceMappings","data","mappings","mapping","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","prepareFilter","columnFilterPairs","filterOption","produceFilterFromColumn","mainRowFilters","filteredRows","preFilteredRows","subRowFilters","evaluateRow","filteredFlatRows","filteredRowsById","subRowsFlat","subRowsById","filteredSubRows","filterSubRows","prefilteredSubRows","fromEntries","evaluatedRows","filteredMainRowsById","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","warn","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","filterRows","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","_row$subRows","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","alower","blower","replaceNonNumeric","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","_rowsById$_rowId","_rowsById$_rowId$cell","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","window","addEventListener","err","passiveEventSupported","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","w","columnIndex","elWidth","getElementById","_document$getElementB","offsetWidth","getElementWidth","startingWidth","newWidth","columnWidthsCopy","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}